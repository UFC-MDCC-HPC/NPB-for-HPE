<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="00240000048000009400000006020000002400005253413100040000110000000bd95d0326e5a905b78adb8963b782506a272bfe73e92fbe0c9efc10fddcd5606b65fefa2742922464f01a44067eccc3e65bd501a2267a1306a9c7767ebea2b5a9b3ab8e7041f50ae2fbddffea5072b64d3a4c78762d95cc875ff2e1c3d3faa61f503415a6c1aa5462861f230202ff9a0998674bdd747bc662088d86e0bd9aa0" isAbstract="false" kind="Computation" name="InitializeImpl" packagePath="impl.adi.data">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000ef308746e6a157dc97c1362d57e15ae0f2fb7b9a3b253513f7fcfd7cb58098fd7cc8e34261a98ab255b45a60347a2cb48dc5cb2e008c87f2be55abe0c6694ef0cba1f3b66d2b65cf2b4f9cffa0e3809b557b90f07f92770ab6123e88dfadcd3e491c7c0af329d380607350238aed820dd27518439c1d62216847915fb341f093" localRef="base" location="adi.data.Initialize/Initialize.hpe" name="Initialize" package="adi.data" version="1.0.0.0">
        <visualDescription h="30" w="50" x="253" y="155">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="instance_type" varName="I"/>
        <parameter formFieldId="class" varName="C"/>
        <port hash_component_UID="002400000480000094000000060200000024000052534131000400001100000009b97ce4f3981d78e251ff90894751a2f19e3d7fcafeadee8da1cb93890a7d9ed59b4773f575afc0782c61b877ac17cea1ab4429bfd162c1bdff0b6c7fe9d07f8e9ccdcd219b58671c77cf6cfbada633e18309cb4c2e518fedeaa6aecf435a12dc4a18c8384c15d61dfab5a2056f58c2bcf936823b8d84a8c5cc5e25827a1598" localRef="problem_data" location="adi.data.ProblemDefinition/ProblemDefinition.hpe" multiple="false" name="ProblemDefinition" package="adi.data" exposed="true">
          <visualDescription h="30" w="140" x="383" y="354">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="instance_type" varName="I"/>
          <parameter formFieldId="class" varName="C"/>
          <unitBounds parallel="true" uRef="problem">
            <visualDescription h="10" w="10" x="5" y="2"/>
          </unitBounds>
        </port>
        <port hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000cfe94b8926d4a7de4f70d204303375a68658c9c988f5e0ec7f1f3dce28b75501399411f8002d0637e06b03a2849ef779a22e26ae137759213f595fd13ccb5101bb6f07e7560df0d8b1beadc8dacecefd49c7844d298e78991b98dd4650ec7bf0b26716727a7bc437f39a5ccede87c7db6829de68c511abb9d0b4e3644bcf66ad" localRef="cells_info" location="common.datapartition.MultiPartitionCells/MultiPartitionCells.hpe" multiple="true" name="MultiPartitionCells" package="common.datapartition" exposed="true">
          <visualDescription h="30" w="130" x="376" y="460">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds parallel="false" uRef="cells">
            <visualDescription h="10" w="10" x="5" y="2"/>
          </unitBounds>
        </port>
        <unitBounds parallel="true" uRef="initialize">
          <visualDescription h="10" w="10" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <innerComponent hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000237f437b205f7bfa00c2d0b40167897c37f84c96a62c077e2832a5360fa8c1c7438dfa969d99bb36a48a7baefcbd50d84ae2e3e71a349dce24c2b0bc473997871be48fdb29d0d48b0928ca968440c6b6663c6740810dab7b664db0e0cfbfe5b21f223402d0d9bd601294898724b6a1da46e78261ef1ee37ac63ca9b2dbdc0d90" localRef="class" location="common.problem_size.Class/Class.hpe" multiple="false" name="Class" package="common.problem_size" exposed="false">
      <visualDescription h="30" w="50" x="182" y="315">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds parallel="false" uRef="class">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent hash_component_UID="002400000480000094000000060200000024000052534131000400001100000071d38687e0d5d2c316c5b3d07d8aa67134a4623aa2696b4c1af143b9dfb26a795943f7fad788e11c36c09b5001b5422f85c04f6580101d9e27cbf7d06c6cec1d87e42c3a8940336c5c2d63abadb4ac8c1519030710b5b087e1d7e415c91fe07522356c2184e3ea18bf6684dd71bda7b7e5e4411c6b9941ea98fa97bde5ccceb1" localRef="instance" location="common.problem_size.Instance/Instance.hpe" multiple="false" name="Instance" package="common.problem_size" exposed="false">
      <visualDescription h="30" w="50" x="646" y="554">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <parameter formFieldId="class" varName="C"/>
      <unitBounds parallel="false" uRef="instance">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="class" varName="C"/>
    <supplyParameter cRef="instance" varName="I"/>
    <interface iRef="IInitializeImpl" nArgs="2">
      <slice isRef="cells_info">
        <originRef cRef="cells_info" iRef="ICells"/>
        <visualDescription h="10" w="10" x="29" y="23"/>
      </slice>
      <slice isRef="problem_data">
        <originRef cRef="problem_data" iRef="IProblemDefinition"/>
        <visualDescription h="10" w="10" x="66" y="6"/>
      </slice>
      <slice isRef="exact_solution">
        <originRef cRef="exact_solution" iRef="IExactSolution"/>
        <visualDescription h="10" w="10" x="59" y="26"/>
      </slice>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using common.datapartition.MultiPartitionCells;&#xA;using adi.data.ProblemDefinition;&#xA;using common.problem_size.Instance;&#xA;using common.problem_size.Class;&#xA;using adi.data.ExactSolution;&#xA;using adi.data.Initialize;&#xA;&#xA;namespace impl.adi.data.InitializeImpl { &#xA;&#xA;public abstract class BaseIInitializeImpl&lt;I, C>: Computation, BaseIInitialize&lt;I, C>&#xA;where I:IInstance&lt;C>&#xA;where C:IClass&#xA;{&#xA;&#x9;&#x9;&#xA;#region data&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;protected int[,] cell_size, cell_low, cell_high, start, end, slice;&#x9;&#x9;&#xA;protected int ncells, IMAX, JMAX, KMAX, maxcells;&#x9;&#x9;&#xA;protected double[,,,,] u;&#x9;&#x9;&#xA;protected double dnzm1, dnym1, dnxm1; &#xA;&#xA;&#x9;&#x9;&#xA;override public void initialize()&#xA;{&#xA;&#x9;cell_size = Cells.cell_size;&#xA;&#x9;cell_low = Cells.cell_low;&#xA;&#x9;cell_high = Cells.cell_high;&#xA;&#x9;start = Cells.cell_start;&#xA;&#x9;end = Cells.cell_end;&#xA;&#x9;slice = Cells.cell_slice;&#xA;&#x9;ncells = Problem.NCells;&#xA;&#x9;&#xA;&#x9;u = Problem.Field_u;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;dnzm1 = Constants.dnzm1;&#xA;&#x9;dnym1 = Constants.dnym1;&#xA;&#x9;dnxm1 = Constants.dnxm1;&#xA;&#x9;&#xA;&#x9;IMAX = Problem.IMAX;&#xA;&#x9;JMAX = Problem.JMAX;&#xA;&#x9;KMAX = Problem.KMAX;&#xA;&#x9;maxcells = Problem.maxcells;&#xA;}&#xA;&#x9;&#x9;&#xA;#endregion&#xA;&#x9;&#x9;&#xA;private ICells cells = null;&#xA;&#xA;public ICells Cells {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.cells == null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;this.cells = (ICells) Services.getPort(&quot;cells_info&quot;);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return this.cells;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IProblemDefinition&lt;I, C> problem = null;&#xA;&#xA;public IProblemDefinition&lt;I, C> Problem {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.problem == null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;this.problem = (IProblemDefinition&lt;I, C>) Services.getPort(&quot;problem_data&quot;);&#xA;&#x9;&#x9;}&#x9;&#xA;&#x9;&#x9;return this.problem;&#xA;&#x9;}&#xA;}&#xA;&#xA;private IExactSolution exact_solution = null;&#xA;&#xA;protected IExactSolution Exact_solution {&#xA;&#x9;get {&#xA;&#x9;&#x9;if (this.exact_solution == null)&#xA;&#x9;&#x9;&#x9;this.exact_solution = (IExactSolution) Services.getPort(&quot;exact_solution&quot;);&#xA;&#x9;&#x9;return this.exact_solution;&#xA;&#x9;}&#xA;}&#xA;&#xA;&#xA; &#xA;&#xA;&#xA;}&#xA;&#xA;}&#xA;" fileType="library" name="BaseIInitializeImpl.cs" srcType="base" uri="impl.adi.data.InitializeImpl/bin/1.0.0.0/BaseIInitializeImpl.dll" versionId="1.0.0.0">
          <dependency>common.datapartition.MultiPartitionCells/bin/1.0.0.0/ICells.dll</dependency>
          <dependency>adi.data.ProblemDefinition/bin/1.0.0.0/IProblemDefinition.dll</dependency>
          <dependency>sp.problem_size.Instance_SP/bin/1.0.0.0/IInstance_SP.dll</dependency>
          <dependency>common.problem_size.Class/bin/1.0.0.0/IClass.dll</dependency>
          <dependency>adi.data.ExactSolution/bin/1.0.0.0/IExactSolution.dll</dependency>
          <dependency>adi.data.Initialize/bin/1.0.0.0/BaseIInitialize.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using common.problem_size.Instance;&#xA;using common.problem_size.Class;&#xA;using adi.data.Initialize;&#xA;using adi.data.ProblemDefinition;&#xA;&#xA;namespace impl.adi.data.InitializeImpl { &#xA;&#xA;&#x9;public class IInitializeImpl&lt;I, C> : BaseIInitializeImpl&lt;I, C>, IInitialize&lt;I, C>&#xA;&#x9;&#x9;where I:IInstance&lt;C>&#xA;&#x9;&#x9;where C:IClass&#xA;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;public override void main() &#xA;&#x9;&#x9;{ &#xA;&#x9;&#x9;&#x9;int c, i, j, k, m, ii, jj, kk, ix, iy, iz;&#xA;&#x9;&#x9;&#x9;double xi, eta, zeta, Pxi, Peta, Pzeta; &#xA;&#x9;        double[] Pface = new double[5*3*2];&#xA;&#x9;&#x9;&#x9;double[] temp = new double[5];&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;//---------------------------------------------------------------------&#xA;&#x9;&#x9;&#x9;//  Later (in compute_rhs) we compute 1/u for every element. A few of &#xA;&#x9;&#x9;&#x9;//  the corner elements are not used, but it convenient (and faster) &#xA;&#x9;&#x9;&#x9;//  to compute the whole thing with a simple loop. Make sure those &#xA;&#x9;&#x9;&#x9;//  values are nonzero by initializing the whole thing here. &#xA;&#x9;&#x9;&#x9;//---------------------------------------------------------------------&#xA;&#x9;        for (c = 0; c &lt; ncells; c++)&#xA;&#x9;        {&#xA;&#x9;            for (k = 1; k &lt;= IMAX + 2; k++)&#xA;&#x9;            {&#xA;&#x9;                for (j = 1; j &lt;= IMAX + 2; j++)&#xA;&#x9;                {&#xA;&#x9;                    for (i = 1; i &lt;= IMAX + 2; i++)&#xA;&#x9;                    {&#xA;&#x9;                        u[c, k, j, i, 0] = 1.0d;&#xA;&#x9;                        u[c, k, j, i, 1] = 0.0d;&#xA;&#x9;                        u[c, k, j, i, 2] = 0.0d;&#xA;&#x9;                        u[c, k, j, i, 3] = 0.0d;&#xA;&#x9;                        u[c, k, j, i, 4] = 1.0d;&#xA;&#x9;                    }&#xA;&#x9;                }&#xA;&#x9;            }&#xA;&#x9;        }&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;//---------------------------------------------------------------------&#xA;&#x9;&#x9;&#x9;// first store the &quot;interpolated&quot; values everywhere on the grid    &#xA;&#x9;&#x9;&#x9;//---------------------------------------------------------------------&#xA;&#x9;        for (c = 0; c &lt; maxcells; c++)&#xA;&#x9;        {&#xA;&#x9;            kk = 2;&#xA;&#x9;            for (k = cell_low[c,2]; k &lt;= cell_high[c,2]; k++)&#xA;&#x9;            {&#xA;&#x9;                zeta = k * dnzm1;&#xA;&#x9;                jj = 2;&#xA;&#x9;                for (j = cell_low[c,1]; j &lt;= cell_high[c,1]; j++)&#xA;&#x9;                {&#xA;&#x9;                    eta = j * dnym1;&#xA;&#x9;                    ii = 2;&#xA;&#x9;                    for (i = cell_low[c,0]; i &lt;= cell_high[c,0]; i++)&#xA;&#x9;                    {&#xA;&#x9;                        xi = i * dnxm1;&#xA;&#x9;&#xA;&#x9;                        for (ix = 0; ix &lt;= 1; ix++)&#xA;&#x9;                        {&#xA;&#x9;                            Exact_solution.setParameters(ix, eta, zeta, Pface, 0 + 0 * 5 + ix * 15);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;    Exact_solution.go();&#xA;&#x9;                        }&#xA;&#x9;                        for (iy = 0; iy &lt;= 1; iy++)&#xA;&#x9;                        {&#xA;&#x9;                            Exact_solution.setParameters(xi, iy, zeta, Pface, 0 + 1 * 5 + iy * 15);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;    Exact_solution.go();&#xA;&#x9;                        }&#xA;&#x9;&#xA;&#x9;                        for (iz = 0; iz &lt;= 1; iz++)&#xA;&#x9;                        {&#xA;&#x9;                            Exact_solution.setParameters(xi, eta, iz, Pface, 0 + 2 * 5 + iz * 15);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;    Exact_solution.go();&#xA;&#x9;                        }&#xA;&#x9;&#xA;&#x9;                        for (m = 0; m &lt; 5; m++)&#xA;&#x9;                        {&#xA;&#x9;                            Pxi = xi * Pface[m + 0 * 5 + 1 * 15] +&#xA;&#x9;                                (1.0d - xi) * Pface[m + 0 * 5 + 0 * 15];&#xA;&#x9;                            Peta = eta * Pface[m + 1 * 5 + 1 * 15] +&#xA;&#x9;                                    (1.0d - eta) * Pface[m + 1 * 5 + 0 * 15];&#xA;&#x9;                            Pzeta = zeta * Pface[m + 2 * 5 + 1 * 15] +&#xA;&#x9;                                    (1.0d - zeta) * Pface[m + 2 * 5 + 0 * 15];&#xA;&#x9;&#xA;&#x9;                            u[c, kk, jj, ii, m] =&#xA;&#x9;                              Pxi + Peta + Pzeta -&#xA;&#x9;                                      Pxi * Peta - Pxi * Pzeta - Peta * Pzeta +&#xA;&#x9;                                      Pxi * Peta * Pzeta;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;        &#xA;&#x9;                        }&#xA;&#x9;                        ii++;&#xA;&#x9;                    }&#xA;&#x9;                    jj++;&#xA;&#x9;                }&#xA;&#x9;                kk++;&#xA;&#x9;            }&#xA;&#x9;        }&#xA;&#x9;        &#xA;&#x9;&#xA;&#x9;&#x9;&#x9;//---------------------------------------------------------------------&#xA;&#x9;&#x9;&#x9;// now store the exact values on the boundaries        &#xA;&#x9;&#x9;&#x9;//---------------------------------------------------------------------&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;//---------------------------------------------------------------------&#xA;&#x9;&#x9;&#x9;// west face                                                  &#xA;&#x9;&#x9;&#x9;//---------------------------------------------------------------------&#xA;&#x9;&#xA;&#x9;        c = slice[0, 0];&#xA;&#x9;        ii = 2;&#xA;&#x9;&#x9;&#x9;xi = 0.0d;&#xA;&#x9;&#x9;&#x9;kk = 2;&#xA;&#x9;&#x9;&#x9;for (k = cell_low[c,2]; k &lt;= cell_high[c,2]; k++)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;zeta = k * dnzm1;&#xA;&#x9;            jj = 2;&#xA;&#x9;&#x9;&#x9;&#x9;for (j = cell_low[c,1]; j &lt;= cell_high[c,1]; j++)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;eta = j * dnym1;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Exact_solution.setParameters(xi, eta, zeta, temp, 0);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Exact_solution.go();&#xA;&#x9;&#x9;&#x9;&#x9;    for (m = 0; m &lt; 5 ; m++)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;                    u[c, kk, jj, ii, m] = temp[m];&#xA;&#x9;                }&#xA;&#x9;                jj++;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;            kk++;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;//---------------------------------------------------------------------&#xA;&#x9;&#x9;&#x9;// east face                                                      &#xA;&#x9;&#x9;&#x9;//---------------------------------------------------------------------&#xA;&#x9;&#xA;&#x9;        c = slice[ncells - 1, 0];&#xA;&#x9;        ii = 2 + cell_size[c, 0] - 1;&#xA;&#x9;&#x9;&#x9;xi = 1.0d;&#xA;&#x9;        kk = 2;&#xA;&#x9;&#x9;&#x9;for (k = cell_low[c,2]; k &lt;= cell_high[c,2]; k++)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;zeta = k * dnzm1;&#xA;&#x9;            jj = 2;&#xA;&#x9;&#x9;&#x9;&#x9;for (j = cell_low[c,1]; j &lt;= cell_high[c,1]; j++)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;                eta = j * dnym1;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Exact_solution.setParameters(xi, eta, zeta, temp, 0);&#xA;&#x9;&#x9;&#x9;&#x9;    Exact_solution.go();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (m = 0; m &lt;= 4; m++)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;                    u[c, kk, jj, ii, m] = temp[m];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;                }&#xA;&#x9;                jj++;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;            kk++;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;//---------------------------------------------------------------------&#xA;&#x9;&#x9;&#x9;// south face                                                 &#xA;&#x9;&#x9;&#x9;//---------------------------------------------------------------------&#xA;&#x9;&#xA;&#x9;        c = slice[0,1];&#xA;&#x9;        jj = 2;&#xA;&#x9;&#x9;&#x9;eta = 0.0d;&#xA;&#x9;&#x9;&#x9;kk = 2;&#xA;&#x9;&#x9;&#x9;for (k = cell_low[c,2]; k &lt;= cell_high[c,2]; k++)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;zeta = k * dnzm1;&#xA;&#x9;            ii = 2;&#xA;&#x9;&#x9;&#x9;&#x9;for (i = cell_low[c,0]; i &lt;= cell_high[c,0]; i++)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;xi = i * dnxm1;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Exact_solution.setParameters(xi, eta, zeta, temp, 0);&#xA;&#x9;&#x9;&#x9;&#x9;    Exact_solution.go();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (m = 0; m &lt;= 4; m++)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;                    u[c, kk, jj, ii, m] = temp[m];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;                }&#xA;&#x9;                ii++;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;            kk++;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;//---------------------------------------------------------------------&#xA;&#x9;&#x9;&#x9;// north face                                    &#xA;&#x9;&#x9;&#x9;//---------------------------------------------------------------------&#xA;&#x9;&#xA;&#x9;        c = slice[ncells - 1, 1];&#xA;&#x9;        jj = 2 + cell_size[c, 1] - 1;&#xA;&#x9;&#x9;&#x9;eta = 1.0d;&#xA;&#x9;        kk = 2;&#xA;&#x9;&#x9;&#x9;for (k = cell_low[c,2]; k &lt;= cell_high[c,2]; k++)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;zeta = k * dnzm1;&#xA;&#x9;            ii = 2;&#xA;&#x9;            for (i = cell_low[c,0]; i &lt;= cell_high[c,0]; i++)&#xA;&#x9;            {&#xA;&#x9;                xi = i * dnxm1;&#xA;&#x9;                Exact_solution.setParameters(xi, eta, zeta, temp, 0);&#xA;&#x9;&#x9;&#x9;&#x9;    Exact_solution.go();&#xA;&#x9;                for (m = 0; m &lt;= 4; m++)&#xA;&#x9;                {&#xA;&#x9;                    u[c, kk, jj, ii, m] = temp[m];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;                }&#xA;&#x9;                ii++;&#xA;&#x9;            }&#xA;&#x9;            kk++;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;//---------------------------------------------------------------------&#xA;&#x9;&#x9;&#x9;// bottom face                                       &#xA;&#x9;&#x9;&#x9;//---------------------------------------------------------------------&#xA;&#x9;&#xA;&#x9;        c = slice[0, 2];&#xA;&#x9;        kk = 2;&#xA;&#x9;&#x9;&#x9;zeta = 0.0d;&#xA;&#x9;&#x9;&#x9;jj = 2;&#xA;&#x9;        for (j = cell_low[c, 1]; j &lt;= cell_high[c, 1]; j++)&#xA;&#x9;        {&#xA;&#x9;            eta = j * dnym1;&#xA;&#x9;            ii = 2;&#xA;&#x9;            for (i = cell_low[c, 0]; i &lt;= cell_high[c, 0]; i++)&#xA;&#x9;            {&#xA;&#x9;                xi = i * dnxm1;&#xA;&#x9;                Exact_solution.setParameters(xi, eta, zeta, temp, 0);&#xA;&#x9;&#x9;&#x9;&#x9;    Exact_solution.go();&#xA;&#x9;                for (m = 0; m &lt;= 4; m++)&#xA;&#x9;                {&#xA;&#x9;                    u[c, kk, jj, ii, m] = temp[m];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;                }&#xA;&#x9;                ii++;&#xA;&#x9;            }&#xA;&#x9;            jj++;&#xA;&#x9;        }&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;//---------------------------------------------------------------------&#xA;&#x9;&#x9;&#x9;// top face     &#xA;&#x9;&#x9;&#x9;//---------------------------------------------------------------------&#xA;&#x9;&#xA;&#x9;        c = slice[ncells - 1, 2];&#xA;&#x9;        kk = 2 + cell_size[c, 2] - 1;&#xA;&#x9;&#x9;&#x9;zeta = 1.0d;&#xA;&#x9;        jj = 2;&#xA;&#x9;&#x9;&#x9;for (j = cell_low[c,1]; j &lt;= cell_high[c,1]; j++)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;            eta = j * dnym1;&#xA;&#x9;            ii = 2;&#xA;&#x9;&#x9;&#x9;&#x9;for (i = cell_low[c,0]; i &lt;= cell_high[c,0]; i++)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;                xi = i * dnxm1;&#xA;&#x9;&#x9;&#x9;&#x9;    Exact_solution.setParameters(xi, eta, zeta, temp, 0);&#xA;&#x9;&#x9;&#x9;&#x9;    Exact_solution.go();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for (m = 0; m &lt;= 4; m++)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;u[c, kk, jj, ii, m] = temp[m];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;                }&#xA;&#x9;                ii++;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;            jj++;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;} // end activate method &#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;&#xA;}&#xA;" fileType="library" name="IInitializeImpl.cs" srcType="user" uri="impl.adi.data.InitializeImpl/bin/1.0.0.0/IInitializeImpl.dll" versionId="1.0.0.0">
          <dependency>sp.problem_size.Instance_SP/bin/1.0.0.0/IInstance_SP.dll</dependency>
          <dependency>common.problem_size.Class/bin/1.0.0.0/IClass.dll</dependency>
          <dependency>%WORKSPACE/impl.adi.data.InitializeImpl/bin/1.0.0.0/BaseIInitializeImpl.dll</dependency>
          <dependency>adi.data.Initialize/bin/1.0.0.0/IInitialize.dll</dependency>
        </file>
      </sources>
      <visualDescription h="40" w="80" x="73" y="77">
        <color b="0" g="255" r="0"/>
      </visualDescription>
      <port name="cells_info">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="cells_info" sRef="cells_info"/>
      </port>
      <port name="problem_data">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="problem_data" sRef="problem_data"/>
      </port>
      <parameter iname="IInstance" order="0" parid="instance_type" uname="instance" varid="I"/>
      <parameter iname="IClass" order="1" parid="class" uname="class" varid="C"/>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <unit iRef="IInitializeImpl" multiple="true" private="false" replica="0" uRef="initialize" visibleInterface="true">
      <super cRef="base" uRef="initialize"/>
      <visualDescription h="40" w="80" x="221" y="267"/>
    </unit>
  </componentInfo>
</component:component>