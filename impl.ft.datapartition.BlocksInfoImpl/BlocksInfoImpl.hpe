<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="00240000048000009400000006020000002400005253413100040000110000006f49c5d2352797d76f35531ee377a3d9eb45557b6a6ce5567d918048b2ffac022efe3ae393ffbc08459f573fea939edc83f98623e85737e77f706766f61362d889510a6b3d30453896ed8ba04bb9fbd229035a69b9c9411a41a030c842f20ca54e82d38e9184f4c7a35b22a10a412c5d88af5b29b39f6db193114b5f7982ebb5" isAbstract="false" kind="Environment" name="BlocksInfoImpl" packagePath="impl.ft.datapartition">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="002400000480000094000000060200000024000052534131000400001100000095e97e58b9ed73eb389d5d67e242ab61d50128486f43ba0afe8ff6bd8d08840f848c22ffad8acff4ef3bd7a6d1af46fd7413f1bf81704ab9152bd0c5c5f6ee8c128f38a1196abb5039132524dd4a4294fda2d6a19c7f1019c9e09736f96280d2298e765b3e51d1f8e779c60cbb6ccff11284a8fd11385bfdb9a8c9d44ada4f92" localRef="base" location="ft.datapartition.BlocksInfo/BlocksInfo.hpe" name="BlocksInfo" package="ft.datapartition" version="1.0.0.0">
        <visualDescription h="95" w="153" x="333" y="324">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="instance_type" varName="I"/>
        <parameter formFieldId="class" varName="C"/>
        <unitBounds parallel="false" uRef="blocks">
          <visualDescription h="10" w="10" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <innerComponent hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000697d9c305173b3189be802c3ff79de737b8611ceba3908e4e506fe84eb48c13ee6bcff5465c546d3f17f9c4be9fd4c3730beb0cdbb834a2cd9a48238e589010fa646d420fa851da6a7fa169817d907191deacca367dd83200354bbdc96d3c5f2986b7d7a8bfceacfa46cb59e4a094c15363a95dc6f9f631d9955d8a6cc75f593" localRef="instance_type" location="ft.problem_size.Instance_FT/Instance_FT.hpe" multiple="false" name="Instance_FT" package="ft.problem_size" exposed="false">
      <visualDescription h="38" w="79" x="235" y="169">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <parameter formFieldId="class" varName="C"/>
      <unitBounds parallel="false" uRef="instance">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000237f437b205f7bfa00c2d0b40167897c37f84c96a62c077e2832a5360fa8c1c7438dfa969d99bb36a48a7baefcbd50d84ae2e3e71a349dce24c2b0bc473997871be48fdb29d0d48b0928ca968440c6b6663c6740810dab7b664db0e0cfbfe5b21f223402d0d9bd601294898724b6a1da46e78261ef1ee37ac63ca9b2dbdc0d90" localRef="class" location="common.problem_size.Class/Class.hpe" multiple="false" name="Class" package="common.problem_size" exposed="false">
      <visualDescription h="30" w="50" x="463" y="198">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds parallel="false" uRef="class">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="class" varName="C"/>
    <supplyParameter cRef="instance_type" varName="I"/>
    <interface iRef="IBlocksInfoImpl" nArgs="2">
      <slice isRef="instance_type">
        <originRef cRef="instance_type" iRef="IInstance"/>
        <visualDescription h="10" w="10" x="3" y="17"/>
      </slice>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using ft.datapartition.BlocksInfo;&#xA;using common.problem_size.Class;&#xA;using ft.problem_size.Instance_FT;&#xA;&#xA;namespace impl.ft.datapartition.BlocksInfoImpl &#xA;{ &#xA;&#x9;public abstract class BaseIBlocksInfoImpl&lt;I, C>: br.ufc.pargo.hpe.kinds.Environment, BaseIBlocks&lt;I, C>&#xA;&#x9;&#x9;where I:IInstance_FT&lt;C>&#xA;&#x9;&#x9;where C:IClass&#x9;&#xA;&#x9;{&#xA;&#x9;&#x9;public BaseIBlocksInfoImpl()&#xA;&#x9;&#x9;{&#xA;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private I instance = default(I);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected I Instance {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.instance == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.instance = (I) Services.getPort(&quot;instance_type&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.instance;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;" fileType="library" name="BaseIBlocksInfoImpl.cs" srcType="base" uri="impl.ft.datapartition.BlocksInfoImpl/bin/1.0.0.0/BaseIBlocksInfoImpl.dll" versionId="1.0.0.0">
          <dependency>ft.datapartition.BlocksInfo/bin/1.0.0.0/BaseIBlocks.dll</dependency>
          <externalDependency>MPI</externalDependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using ft.datapartition.BlocksInfo;&#xA;using common.problem_size.Class;&#xA;using ft.problem_size.Instance_FT;&#xA;using MPI;&#xA;&#xA;namespace impl.ft.datapartition.BlocksInfoImpl &#xA;{ &#xA;&#x9;public class IBlocksInfoImpl&lt;I, C> : BaseIBlocksInfoImpl&lt;I, C>, IBlocks&lt;I, C>&#xA;&#x9;&#x9;where I:IInstance_FT&lt;C>&#xA;&#x9;&#x9;where C:IClass&#x9;&#xA;&#x9;{&#xA;&#x9;&#x9;public static int layout_0D = 0, layout_1D = 1, layout_2D = 2;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;override public void initialize()&#xA;&#x9;&#x9;{&#x9;&#x9;&#x9;&#xA;            niter_default = Instance.niter_default;&#xA;&#x9;&#x9;    nx = Instance.nx;&#xA;&#x9;&#x9;&#x9;ny = Instance.ny;&#xA;&#x9;&#x9;&#x9;nz = Instance.nz;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;initialConfig();&#xA;&#x9;&#x9;&#x9;problemConfig();&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;blocksConfig();&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected int niter_default;&#xA;&#x9;&#x9;private int root=0;&#xA;&#xA;&#x9;&#x9;public static double mod(double a, double b) { return (a % b); }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private int _fftblock, _fftblockpad, _node, _me1, _me2, _size1, _size2;&#xA;&#x9;&#x9;private int[] _xstart = {0,0,0};&#xA;&#x9;&#x9;private int[] _ystart = {0,0,0};&#xA;&#x9;&#x9;private int[] _zstart = {0,0,0};&#xA;&#x9;&#x9;private int[] _xend = {0,0,0};&#xA;&#x9;&#x9;private int[] _yend = {0,0,0};&#xA;&#x9;&#x9;private int[] _zend = {0,0,0};&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public int fftblock    {get { return _fftblock; }    set { _fftblock = value; } }&#xA;&#x9;&#x9;public int fftblockpad {get { return _fftblockpad; } set { _fftblockpad = value; } }&#xA;&#x9;&#x9;public int node        {get { return _node; }        set { _node = value; } }&#xA;&#x9;&#x9;public int me1         {get { return _me1; }         set { _me1 = value; } }&#xA;&#x9;&#x9;public int me2         {get { return _me2; }         set { _me2 = value; } }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public int size1       { get { return _size1;       } set { _size1 = value;       } }&#xA;&#x9;&#x9;public int size2       { get { return _size2;       } set { _size2 = value;       } }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public int[] xstart {get { return _xstart; } }&#xA;&#x9;&#x9;public int[] ystart {get { return _ystart; } }&#xA;&#x9;&#x9;public int[] zstart {get { return _zstart; } }&#xA;&#x9;&#x9;public int[] xend   {get { return _xend; } }&#xA;&#x9;&#x9;public int[] yend   {get { return _yend; } }&#xA;&#x9;&#x9;public int[] zend   {get { return _zend; } }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public int[,] dims            { get { return _dims;    } }&#x9;&#x9;&#xA;&#x9;&#x9;public int np          { get { return _np;          } set { _np = value;          } }&#xA;&#x9;&#x9;public int np1         { get { return _np1;         } set { _np1 = value;         } }&#xA;&#x9;&#x9;public int np2         { get { return _np2;         } set { _np2 = value;         } }&#xA;&#x9;&#x9;public int layout_type { get { return _layout_type; } set { _layout_type = value; } }&#xA;&#x9;&#x9;public int ntdivnp     { get { return _ntdivnp;     } set { _ntdivnp = value;     } }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected int[,] _dims = new int[3, 3];&#xA;&#x9;&#x9;protected int _np,_np1,_np2,_layout_type,_ntdivnp, nx, ny, nz;&#xA;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;public void blocksConfig()&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;    int layout_0D = 0, layout_1D = 1, layout_2D = 2;&#xA;&#x9;&#x9;    int fftblock_default=16, fftblockpad_default=18;&#xA;&#x9;&#x9;    int node = this.GlobalRank;&#xA;            _me2 = (int)mod(node, np2);&#xA;            _me1 = node/np2;&#xA;            if(layout_type == layout_0D) {&#xA;                for(int i = 0; i &lt; 3; i++) {&#xA;                    _xstart[i] = 1;&#xA;                    _xend[i]   = nx;&#xA;                    _ystart[i] = 1;&#xA;                    _yend[i]   = ny;&#xA;                    _zstart[i] = 1;&#xA;                    _zend[i]   = nz;&#xA;                }&#xA;&#xA;            }&#xA;            else if(layout_type == layout_1D) {&#xA;                _xstart[0] = 1;&#xA;                _xend[0]   = nx;&#xA;                _ystart[0] = 1;&#xA;                _yend[0]   = ny;&#xA;                _zstart[0] = 1 + _me2 * nz/np2;&#xA;                _zend[0]   = (_me2+1) * nz/np2;&#xA;&#xA;                _xstart[1] = 1;&#xA;                _xend[1]   = nx;&#xA;                _ystart[1] = 1;&#xA;                _yend[1]   = ny;&#xA;                _zstart[1] = 1 + _me2 * nz/np2;&#xA;                _zend[1]   = (_me2+1) * nz/np2;&#xA;&#xA;                _xstart[2] = 1;&#xA;                _xend[2]   = nx;&#xA;                _ystart[2] = 1 + _me2 * ny/np2;&#xA;                _yend[2]   = (_me2+1) * ny/np2;&#xA;                _zstart[2] = 1;&#xA;                _zend[2] = nz;&#xA;&#xA;            }&#xA;            else if(layout_type == layout_2D) {&#xA;&#xA;                _xstart[0] = 1;&#xA;                _xend[0]   = nx;&#xA;                _ystart[0] = 1 + _me1 * ny/np1;&#xA;                _yend[0]   = (_me1+1) * ny/np1;&#xA;                _zstart[0] = 1 + _me2 * nz/np2;&#xA;                _zend[0]   = (_me2+1) * nz/np2;&#xA;&#xA;                _xstart[1] = 1 + _me1 * nx/np1;&#xA;                _xend[1]   = (_me1+1)*nx/np1;&#xA;                _ystart[1] = 1;&#xA;                _yend[1]   = ny;&#xA;                _zstart[1] = _zstart[0];&#xA;                _zend[1]   = _zend[0];&#xA;&#xA;                _xstart[2] = _xstart[1];&#xA;                _xend[2]   = _xend[1];&#xA;                _ystart[2] = 1 + _me2 *ny/np2;&#xA;                _yend[2]   = (_me2+1)*ny/np2;&#xA;                _zstart[2] = 1;&#xA;                _zend[2] = nz;&#xA;            }&#xA;            _fftblock = fftblock_default;&#xA;            _fftblockpad = fftblockpad_default;&#xA;&#xA;            int dim1 = ny/np1;&#xA;            int dim2 = nx/np1;&#xA;            int dim3 = nx/np1;&#xA;            if(layout_type == layout_2D) {&#xA;                if(dim1 &lt; _fftblock)&#xA;                    _fftblock = dim1;&#xA;                if(dim2 &lt; _fftblock)&#xA;                    _fftblock = dim2;&#xA;                if(dim3 &lt; _fftblock)&#xA;                    _fftblock = dim3;&#xA;            }&#xA;&#xA;            if(_fftblock != fftblock_default)&#xA;                _fftblockpad = _fftblock + 3;&#xA;                &#xA;            _size1 = ((int)(nz/np2))*nx*2;&#xA;            _size2 = nx*2;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;     &#x9;&#x9;Console.Error.WriteLine(&quot;size1=&quot; + _size1 + &quot;, size2=&quot;+ _size2);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;        public void problemConfig()&#xA;&#x9;&#x9;{&#xA;            _np = this.Size;&#xA;&#x9;&#x9;&#x9;_ntdivnp = ((nx*ny)/_np)*nz;&#xA;&#xA;            if(_layout_type == layout_0D) &#xA;&#x9;&#x9;&#x9;{&#xA;                for(int i = 0; i &lt; 3; i++) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;                    _dims[0, i] = nx;&#xA;                    _dims[1, i] = ny;&#xA;                    _dims[2, i] = nz;&#xA;                }&#xA;            }&#xA;            else if(_layout_type == layout_1D) &#xA;&#x9;&#x9;&#x9;{&#xA;                _dims[0, 0] = nx;&#xA;                _dims[1, 0] = ny;&#xA;                _dims[2, 0] = nz;&#xA;&#xA;                _dims[0, 1] = nx;&#xA;                _dims[1, 1] = ny;&#xA;                _dims[2, 1] = nz;&#xA;&#xA;                _dims[0, 2] = nz;&#xA;                _dims[1, 2] = nx;&#xA;                _dims[2, 2] = ny;&#xA;            }&#xA;            else if(_layout_type == layout_2D) &#xA;&#x9;&#x9;&#x9;{&#xA;                _dims[0, 0] = nx;&#xA;                _dims[1, 0] = ny;&#xA;                _dims[2, 0] = nz;&#xA;&#xA;                _dims[0, 1] = ny;&#xA;                _dims[1, 1] = nx;&#xA;                _dims[2, 1] = nz;&#xA;&#xA;                _dims[0, 2] = nz;&#xA;                _dims[1, 2] = nx;&#xA;                _dims[2, 2] = ny;&#xA;&#xA;            }&#xA;&#x9;&#x9;&#x9;&#xA;            _dims[1, 0] = _dims[1, 0] / _np1;&#xA;            _dims[2, 0] = _dims[2, 0] / _np2;&#xA;            _dims[1, 1] = _dims[1, 1] / _np1;&#xA;            _dims[2, 1] = _dims[2, 1] / _np2;&#xA;            _dims[1, 2] = _dims[1, 2] / _np1;&#xA;            _dims[2, 2] = _dims[2, 2] / _np2;&#xA;&#x9;&#x9;&#x9;&#xA;        }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#xA;        public int initialConfig() &#xA;&#x9;&#x9;{            &#xA;&#x9;&#x9;&#x9;Intracommunicator worldcomm = this.WorldComm;&#xA;&#x9;&#x9;&#x9;&#xA;            np = worldcomm.Size;&#xA;            int node = this.GlobalRank;&#xA;            int niter = niter_default;&#xA;&#x9;&#x9;&#x9;&#xA;            if(node == 0) &#xA;&#x9;&#x9;&#x9;{&#xA;                Console.WriteLine(&quot; NAS Parallel Benchmarks 3.3 -- FT Benchmark &quot;);&#xA;&#xA;                if(np == 1) {&#xA;                    np1 = 1;&#xA;                    np2 = 1;&#xA;                    layout_type = layout_0D;&#xA;                }&#xA;                else if(np &lt;= nz) {&#xA;                    np1 = 1;&#xA;                    np2 = np;&#xA;                    layout_type = layout_1D;&#xA;                }&#xA;                else {&#xA;                    np1 = nz;&#xA;                    np2 = np/nz;&#xA;                    layout_type = layout_2D;&#xA;                }&#xA;                &#xA;                Console.WriteLine(&quot; Size: &quot; + nx + &quot;x&quot; + ny + &quot;x&quot; + nz);&#xA;                Console.WriteLine(&quot; Iterations: &quot;+ niter);&#xA;                Console.WriteLine(&quot; Number of processes : &quot;+ np);&#xA;                Console.WriteLine(&quot; Processor array     : &quot;+np1+&quot;x&quot;+np2);&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;                if(layout_type == layout_0D) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;                    Console.WriteLine(&quot; Layout type: OD&quot;);&#xA;                }&#xA;                else if(layout_type == layout_1D) &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;                    Console.WriteLine(&quot; Layout type: 1D&quot;);&#xA;                }&#xA;                else &#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;                    Console.WriteLine(&quot; Layout type: 2D&quot;);&#xA;                }&#xA;            }&#xA;&#x9;&#x9;&#x9;&#xA;            worldcomm.Broadcast&lt;int>(ref _np1, root);&#xA;            worldcomm.Broadcast&lt;int>(ref niter, root);&#xA;            worldcomm.Broadcast&lt;int>(ref _np2, root);&#xA;&#x9;&#x9;&#x9;&#xA;            if(np1 == 1 &amp;&amp; np2 == 1) &#xA;&#x9;&#x9;&#x9;{&#xA;                layout_type = layout_0D;&#xA;            }&#xA;            else if(np1 == 1) &#xA;&#x9;&#x9;&#x9;{&#xA;                layout_type = layout_1D;&#xA;            }&#xA;            else &#xA;&#x9;&#x9;&#x9;{&#xA;                layout_type = layout_2D;&#xA;            }&#xA;&#x9;&#x9;&#x9;&#xA;            return niter;&#xA;        }&#xA;&#x9;&#x9;&#xA;&#x9;}&#xA;}&#xA;" fileType="library" name="IBlocksInfoImpl.cs" srcType="user" uri="impl.ft.datapartition.BlocksInfoImpl/bin/1.0.0.0/IBlocksInfoImpl.dll" versionId="1.0.0.0">
          <dependency>%WORKSPACE/impl.ft.datapartition.BlocksInfoImpl/bin/1.0.0.0/BaseIBlocksInfoImpl.dll</dependency>
          <dependency>ft.datapartition.BlocksInfo/bin/1.0.0.0/IBlocks.dll</dependency>
          <externalDependency>MPI</externalDependency>
        </file>
      </sources>
      <visualDescription h="40" w="115" x="202" y="110">
        <color b="0" g="128" r="255"/>
      </visualDescription>
      <externalReferences>MPI</externalReferences>
      <parameter iname="IInstance_FT" order="0" parid="instance_type" uname="instance" varid="I"/>
      <parameter iname="IClass" order="1" parid="class" uname="class" varid="C"/>
    </interface>
    <unit iRef="IBlocksInfoImpl" multiple="false" private="false" replica="0" uRef="blocks" visibleInterface="true">
      <super cRef="base" uRef="blocks"/>
      <visualDescription h="40" w="80" x="208" y="279"/>
    </unit>
  </componentInfo>
</component:component>