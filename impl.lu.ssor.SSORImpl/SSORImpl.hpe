<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000d58af5fbdffa2decdc64f8c8e20c2a6ac5e8ef09e9fa14b7e5eb5c53eee812f75b5dad9709ea84d93667ffea29249bed900028f419ebd1c5e2f6780f1eab97c422afb2c06c5d74f1cf4df04dcf6205d7cf001cb0ecb2c939efb42037602c886f2cf0750c4900a3cca58e689f486ed1ed0f70751804c1ee4cc55a93f98214c783" isAbstract="false" kind="Computation" name="SSORImpl" packagePath="impl.lu.ssor">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000c5b81bce8b0bc49684b9cdd293c3bd43b6e9dc097124f3b82fd3c6b9c5971be78521bee75aee242ef32abe3f65f06d39e90838dc7ff8fb47d003bca71a08f05e9770fd304b630badf0b7a466a7ceeb1cb9edffa5dd5e76a36de48aa2fde43d926362c0cd9ef1a32601b326cfa08b3683d39f4901c8bae988ae6c204175c01ca8" localRef="base" location="lu.ssor.SSOR/SSOR.hpe" name="SSOR" package="lu.ssor" version="1.0.0.0">
        <visualDescription h="48" w="75" x="274" y="340">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="instance_type" varName="I"/>
        <parameter formFieldId="class" varName="C"/>
        <port hash_component_UID="00240000048000009400000006020000002400005253413100040000110000003d814b4345cf5faa20de75a01f91d78801c9aa8825d72a72adf61dc3f77f69a0d55eaceeec93bd9f288f7929dcceaf5a0bf739dbda828f06cacf8cc8d7396a243bfad7d225e794677392c2f895cd42470e6dbf22f2bf1ce97b9dae1ce70dc67096f97eec9cf234ee0a67fe88da930be655bc5fc0b8df79434c5cca0f2ba23c94" localRef="x_buffer" location="common.Buffer/Buffer.hpe" multiple="true" name="Buffer" package="common" exposed="true">
          <visualDescription h="30" w="115" x="427" y="224">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds parallel="false" uRef="buffer">
            <visualDescription h="10" w="10" x="5" y="2"/>
          </unitBounds>
        </port>
        <port hash_component_UID="00240000048000009400000006020000002400005253413100040000110000009b5fdf9e2fd2e1d4c40d5d105e19369c7729126e13c1d35d7124531d9c4fa1a01ecb25564a9fc1e7175d98659a5280d86a339f77d53abc6eff4debf0c86ea2c480a3ffedb149923bba754c2bb0fb6117e2416acad5d23bebfe734b82b120e8ca3451465ce29e2c470da1b915836a5db31d0e17997a541c0f79ea1aed03990587" localRef="x" location="common.topology.Ring/Ring.hpe" multiple="false" name="Ring" package="common.topology" exposed="true">
          <visualDescription h="34" w="35" x="43" y="347">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds parallel="true" uRef="cell">
            <visualDescription h="10" w="10" x="5" y="2"/>
          </unitBounds>
        </port>
        <port hash_component_UID="00240000048000009400000006020000002400005253413100040000110000009b5fdf9e2fd2e1d4c40d5d105e19369c7729126e13c1d35d7124531d9c4fa1a01ecb25564a9fc1e7175d98659a5280d86a339f77d53abc6eff4debf0c86ea2c480a3ffedb149923bba754c2bb0fb6117e2416acad5d23bebfe734b82b120e8ca3451465ce29e2c470da1b915836a5db31d0e17997a541c0f79ea1aed03990587" localRef="y" location="common.topology.Ring/Ring.hpe" multiple="false" name="Ring" package="common.topology" exposed="true">
          <visualDescription h="35" w="33" x="238" y="88">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds parallel="true" uRef="cell">
            <visualDescription h="10" w="10" x="5" y="2"/>
          </unitBounds>
        </port>
        <port hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000f3194c0a7b197fb560dfcad8ee5b421b78f1f03d002a081027a334aa25ebf3ca7669300c0fd23f8f1547226d2833753b8583e09a6b1fcc393107abb8e8670fb2d48b48ea486fa7f94cb968f2760707e531b14426dedc94542dfdf89efcdf612aeabb738a4b713e0a7a9b3ee97b95d783693b746ddcce119ba7c5080176270d8a" localRef="blocks_info" location="lu.datapartition.BlocksInfo/BlocksInfo.hpe" multiple="true" name="BlocksInfo" package="lu.datapartition" exposed="true">
          <visualDescription h="29" w="76" x="72" y="387">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="instance_type" varName="I"/>
          <parameter formFieldId="class" varName="C"/>
          <unitBounds parallel="false" uRef="blocks">
            <visualDescription h="10" w="10" x="5" y="2"/>
          </unitBounds>
        </port>
        <port hash_component_UID="00240000048000009400000006020000002400005253413100040000110000009f8aadd94be2122c6dbf97a8db4c368df4aa14e5eef40999c777e681c973106bec55b80c133f1e7301d0ff36e2ee37a1d7d095ffff4581f295b2e8fc055fc07304178d993e14731e9c3d1e72370eee41c30ae18e6d096d5d70ac13a2833e8945cd641f4a3cab17bc2397b395bc234fdfa244afa599eb514a94d884e663b3a3a5" localRef="problem_data" location="lu.data.ProblemDefinition/ProblemDefinition.hpe" multiple="false" name="ProblemDefinition" package="lu.data" exposed="true">
          <visualDescription h="31" w="95" x="444" y="223">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="instance_type" varName="I"/>
          <parameter formFieldId="class" varName="C"/>
          <unitBounds parallel="true" uRef="problem">
            <visualDescription h="10" w="10" x="65" y="16"/>
          </unitBounds>
        </port>
        <port hash_component_UID="00240000048000009400000006020000002400005253413100040000110000003d814b4345cf5faa20de75a01f91d78801c9aa8825d72a72adf61dc3f77f69a0d55eaceeec93bd9f288f7929dcceaf5a0bf739dbda828f06cacf8cc8d7396a243bfad7d225e794677392c2f895cd42470e6dbf22f2bf1ce97b9dae1ce70dc67096f97eec9cf234ee0a67fe88da930be655bc5fc0b8df79434c5cca0f2ba23c94" localRef="y_buffer" location="common.Buffer/Buffer.hpe" multiple="true" name="Buffer" package="common" exposed="true">
          <visualDescription h="30" w="102" x="433" y="382">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds parallel="false" uRef="buffer">
            <visualDescription h="10" w="10" x="5" y="2"/>
          </unitBounds>
        </port>
        <port hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000059fdc60f0095a1142aef66ff82b5e8659158d29c9ae6eedd576a96e33ae1faaddaf78b57c8cab897deeb79b165ed011c3cd25deeeed69da38fc30a1143e39fa67ab658c278a82203de07eafa3dafe7704a84c1fffc42035b92d09563efdfe7b59862d01f598f626efa5cd4eef962fb18970112f8a530495c2a482922a19258b" localRef="mpi" location="environment.MPIDirect/MPIDirect.hpe" multiple="false" name="MPIDirect" package="environment" exposed="true">
          <visualDescription h="30" w="54" x="478" y="313">
            <color b="240" g="32" r="160"/>
          </visualDescription>
          <unitBounds parallel="true" uRef="mpi">
            <visualDescription h="10" w="10" x="5" y="2"/>
          </unitBounds>
        </port>
        <unitBounds parallel="true" uRef="ssor">
          <visualDescription h="10" w="10" x="33" y="3"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <innerComponent hash_component_UID="00240000048000009400000006020000002400005253413100040000110000004d9c75ae5f43eaaeb10762b3e7c65b336ea4790b679668da776b55e1821b1f59388b8ea2e5f25263fc4cebe208bc2cb79d9bcbbc6167a4bd4b552d03cca4ef35f734d0cbac01feb8e9a6d6296807fccc63cd003ba735a6445bb240120f051f046aa5787203f6fd7fd7b0cd0e18a980c63f35f8918343d6ea5563d8c3211f8ab1" localRef="instance_type" location="lu.problem_size.Instance_LU/Instance_LU.hpe" multiple="false" name="Instance_LU" package="lu.problem_size" exposed="false">
      <visualDescription h="34" w="110" x="95" y="134">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <parameter formFieldId="class" varName="C"/>
      <unitBounds parallel="false" uRef="instance">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000237f437b205f7bfa00c2d0b40167897c37f84c96a62c077e2832a5360fa8c1c7438dfa969d99bb36a48a7baefcbd50d84ae2e3e71a349dce24c2b0bc473997871be48fdb29d0d48b0928ca968440c6b6663c6740810dab7b664db0e0cfbfe5b21f223402d0d9bd601294898724b6a1da46e78261ef1ee37ac63ca9b2dbdc0d90" localRef="class" location="common.problem_size.Class/Class.hpe" multiple="false" name="Class" package="common.problem_size" exposed="false">
      <visualDescription h="30" w="50" x="116" y="191">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds parallel="false" uRef="class">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="class" varName="C"/>
    <supplyParameter cRef="instance_type" varName="I"/>
    <interface iRef="ISSORImpl" nArgs="2">
      <slice isRef="rhs">
        <originRef cRef="rhs" iRef="IRhs"/>
        <visualDescription h="10" w="10" x="99" y="64"/>
      </slice>
      <slice isRef="l2norm">
        <originRef cRef="l2norm" iRef="IL2Norm"/>
        <visualDescription h="10" w="10" x="110" y="74"/>
      </slice>
      <slice isRef="jacld">
        <originRef cRef="jacld" iRef="ITriangularPartJacobianMatrix"/>
        <visualDescription h="10" w="10" x="2" y="3"/>
      </slice>
      <slice isRef="jacu">
        <originRef cRef="jacu" iRef="ITriangularPartJacobianMatrix"/>
        <visualDescription h="10" w="10" x="77" y="6"/>
      </slice>
      <slice isRef="timer">
        <originRef cRef="timer" iRef="ITimer"/>
        <visualDescription h="10" w="10" x="133" y="54"/>
      </slice>
      <slice isRef="instance_type">
        <originRef cRef="instance_type" iRef="IInstance"/>
        <visualDescription h="10" w="10" x="86" y="23"/>
      </slice>
      <slice isRef="buts">
        <originRef cRef="buts" iRef="IWavefront"/>
        <visualDescription h="10" w="10" x="9" y="40"/>
      </slice>
      <slice isRef="blts">
        <originRef cRef="blts" iRef="IWavefront"/>
        <visualDescription h="10" w="10" x="170" y="85"/>
      </slice>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using lu.ssor.Rhs;&#xA;using lu.problem_size.Instance_LU;&#xA;using common.problem_size.Class;&#xA;using lu.data.ProblemDefinition;&#xA;using lu.datapartition.BlocksInfo;&#xA;using lu.ssor.L2Norm;&#xA;using lu.ssor.BlockTriangularSolutionWFWork;&#xA;using common.interactionpattern.Wavefront;&#xA;using common.direction.Forward;&#xA;using common.direction.Backward;&#xA;using environment.MPIDirect;&#xA;using common.benchmarking.Timer;&#xA;using lu.ssor.TriangularPartJacobianMatrix;&#xA;using common.topology.Ring;&#xA;using lu.problem_size.Instance;&#xA;using lu.ssor.SSOR;&#xA;using MPI;&#xA;&#xA;namespace impl.lu.ssor.SSORImpl &#xA;{ &#xA;&#x9;public abstract class BaseISSORImpl&lt;I, C>: Computation, BaseISSOR&lt;I, C>&#xA;&#x9;&#x9;where I:IInstance_LU&lt;C>&#xA;&#x9;&#x9;where C:IClass&#xA;&#x9;{&#xA;&#x9;   &#xA;&#x9;&#x9;#region data&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;protected Intracommunicator worldcomm;&#xA;&#x9;&#x9;&#x9;protected int nz,ist,jst,iend,jend;&#xA;&#x9;&#x9;&#x9;protected int isiz1, isiz2;&#xA;&#x9;&#x9;&#x9;protected int itmax,inorm;&#xA;&#x9;&#x9;&#x9;protected double dt;&#xA;&#x9;&#x9;&#x9;protected double [,,,] u,a,b,c,d,rsd;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;override public void initialize()&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;    itmax = Instance.itmax;&#xA;&#x9;&#x9;&#x9;    inorm = Instance.inorm;&#xA;&#x9;&#x9;&#x9;    dt    = Instance.dt;&#xA;&#x9;&#x9;&#x9;    &#xA;&#x9;&#x9;&#x9;    nz   = Blocks.nz;&#xA;                ist  = Blocks.ist;&#xA;                jst  = Blocks.jst;&#xA;                iend = Blocks.iend;&#xA;                jend = Blocks.jend;&#xA;                &#xA;                isiz1 = Problem.isiz1;&#xA;                isiz2 = Problem.isiz2; &#xA;                u     = Problem.Field_u;                &#xA;                a     = Problem.Field_a;&#xA;                b     = Problem.Field_b;&#xA;                c     = Problem.Field_c;&#xA;                d     = Problem.Field_d;&#xA;                rsd   = Problem.Field_rsd;&#xA;                &#xA;&#x9;&#x9;&#x9;&#x9;worldcomm = this.WorldComm;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;#endregion&#xA;&#x9;&#xA;&#x9;&#x9;private IRhs&lt;I, C> rhs = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected IRhs&lt;I, C> Rhs {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.rhs == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.rhs = (IRhs&lt;I, C>) Services.getPort(&quot;rhs&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.rhs;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IProblemDefinition&lt;I, C> problem = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public IProblemDefinition&lt;I, C> Problem {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.problem == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.problem = (IProblemDefinition&lt;I, C>) Services.getPort(&quot;problem_data&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.problem;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IBlocksInfo&lt;I,C> blocks = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public IBlocksInfo&lt;I,C> Blocks {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.blocks == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.blocks = (IBlocksInfo&lt;I,C>) Services.getPort(&quot;blocks_info&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.blocks;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IL2Norm&lt;I, C> l2norm = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected IL2Norm&lt;I, C> L2norm {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.l2norm == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.l2norm = (IL2Norm&lt;I, C>) Services.getPort(&quot;l2norm&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.l2norm;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IWavefront&lt;IBTSWork&lt;IForwardDirection, I, C>, IForwardDirection> blts = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected IWavefront&lt;IBTSWork&lt;IForwardDirection, I, C>, IForwardDirection> Blts {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.blts == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.blts = (IWavefront&lt;IBTSWork&lt;IForwardDirection, I, C>, IForwardDirection>) Services.getPort(&quot;blts&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.blts;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IWavefront&lt;IBTSWork&lt;IBackwardDirection, I, C>, IBackwardDirection> buts = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected IWavefront&lt;IBTSWork&lt;IBackwardDirection, I, C>, IBackwardDirection> Buts {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.buts == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.buts = (IWavefront&lt;IBTSWork&lt;IBackwardDirection, I, C>, IBackwardDirection>) Services.getPort(&quot;buts&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.buts;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IBTSWork&lt;IForwardDirection, I, C> blts_work = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected IBTSWork&lt;IForwardDirection, I, C> Blts_work {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.blts_work == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.blts_work= (IBTSWork&lt;IForwardDirection, I, C>) Services.getPort(&quot;work_blts&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.blts_work;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IBTSWork&lt;IBackwardDirection, I, C> buts_work = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected IBTSWork&lt;IBackwardDirection, I, C> Buts_work {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.buts_work == null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.buts_work = (IBTSWork&lt;IBackwardDirection, I, C>) Services.getPort(&quot;work_buts&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;return this.buts_work;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;private IMPIDirect mpi = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public IMPIDirect Mpi {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.mpi == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.mpi = (IMPIDirect) Services.getPort(&quot;mpi&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.mpi;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private ITimer timer = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected ITimer Timer {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.timer == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.timer = (ITimer) Services.getPort(&quot;timer&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.timer;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private ITriangularPartJacobianMatrix&lt;I, C, IForwardDirection> jacld = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected ITriangularPartJacobianMatrix&lt;I, C, IForwardDirection> Jacld {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.jacld == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.jacld = (ITriangularPartJacobianMatrix&lt;I, C, IForwardDirection>) Services.getPort(&quot;jacld&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.jacld;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private ITriangularPartJacobianMatrix&lt;I, C, IBackwardDirection> jacu = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected ITriangularPartJacobianMatrix&lt;I, C, IBackwardDirection> Jacu {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.jacu == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.jacu = (ITriangularPartJacobianMatrix&lt;I, C, IBackwardDirection>) Services.getPort(&quot;jacu&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.jacu;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private ICell y = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public ICell Y {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.y == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.y = (ICell) Services.getPort(&quot;y&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.y;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private ICell x = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public ICell X {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.x == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.x = (ICell) Services.getPort(&quot;x&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.x;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private I instance = default(I);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected I Instance {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.instance == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.instance = (I) Services.getPort(&quot;instance_type&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.instance;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9; &#xA;&#x9;}&#xA;}&#xA;" fileType="library" name="BaseISSORImpl.cs" srcType="base" uri="impl.lu.ssor.SSORImpl/bin/1.0.0.0/BaseISSORImpl.dll" versionId="1.0.0.0">
          <dependency>lu.ssor.Rhs/bin/1.0.0.0/IRhs.dll</dependency>
          <dependency>lu.problem_size.Instance_LU/bin/1.0.0.0/IInstance_LU.dll</dependency>
          <dependency>common.problem_size.Class/bin/1.0.0.0/IClass.dll</dependency>
          <dependency>lu.data.ProblemDefinition/bin/1.0.0.0/IProblemDefinition.dll</dependency>
          <dependency>lu.datapartition.BlocksInfo/bin/1.0.0.0/IBlocksInfo.dll</dependency>
          <dependency>lu.ssor.L2Norm/bin/1.0.0.0/IL2Norm.dll</dependency>
          <dependency>lu.ssor.BlockTriangularSolution/bin/1.0.0.0/IBlockTriangularSolution.dll</dependency>
          <dependency>lu.triangular.Lower/bin/1.0.0.0/ILower.dll</dependency>
          <dependency>lu.triangular.Upper/bin/1.0.0.0/IUpper.dll</dependency>
          <dependency>environment.MPIDirect/bin/1.0.0.0/IMPIDirect.dll</dependency>
          <dependency>common.benchmarking.Timer/bin/1.0.0.0/ITimer.dll</dependency>
          <dependency>lu.ssor.TriangularPartJacobianMatrix/bin/1.0.0.0/ITriangularPartJacobianMatrix.dll</dependency>
          <dependency>lu.topology.Neighbors/bin/1.0.0.0/INeighbors.dll</dependency>
          <dependency>lu.problem_size.Instance/bin/1.0.0.0/IInstance.dll</dependency>
          <dependency>lu.ssor.SSOR/bin/1.0.0.0/BaseISSOR.dll</dependency>
          <externalDependency>MPI</externalDependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using lu.problem_size.Instance_LU;&#xA;using common.problem_size.Class;&#xA;using lu.ssor.SSOR;&#xA;&#xA;namespace impl.lu.ssor.SSORImpl &#xA;{ &#xA;&#x9;public class ISSORImpl&lt;I, C> : BaseISSORImpl&lt;I, C>, ISSOR&lt;I, C>&#xA;&#x9;&#x9;where I:IInstance_LU&lt;C>&#xA;&#x9;&#x9;where C:IClass&#xA;&#x9;{&#xA;&#x9;    private int niter;&#xA;&#x9;&#xA;&#x9;&#x9;public override void main() &#xA;&#x9;&#x9;{&#xA;            int i, j, k, m;&#xA;            int istep;&#xA;            double  tmp;&#xA;            double[] delunm = new double[5];&#xA;            double[] tolrsd = {1.0E-08, 1.0E-08, 1.0E-08, 1.0E-08, 1.0E-08};&#xA;            double omega=1.2d;&#xA;            rsdnm  = new double[5];&#xA;            double wtime;&#xA;            int node = this.GlobalRank;&#xA;            tmp = 1.0d/(omega*(2.0d-omega));&#xA;            &#xA;            //---------------------------------------------------------------------&#xA;            //   initialize a,b,c,d to zero [guarantees that page tables have been&#xA;            //   formed, if applicable on given architecture, before timestepping].&#xA;            //---------------------------------------------------------------------&#xA;            for(m=0; m&lt;isiz2; m++) &#xA;            {&#xA;                for(k=0; k&lt;isiz1; k++) &#xA;                {&#xA;                    for(j=0; j&lt;5; j++) &#xA;                    {&#xA;                        for(i=0; i&lt;5; i++) &#xA;                        {&#xA;                            a[m, k, j, i] = 0.0;&#xA;                            b[m, k, j, i] = 0.0;&#xA;                            c[m, k, j, i] = 0.0;&#xA;                            d[m, k, j, i] = 0.0;&#xA;                        }&#xA;                    }&#xA;                }&#xA;            }&#xA;&#x9;&#x9;&#x9;&#xA;            //---------------------------------------------------------------------&#xA;            //   compute the steady-state residuals&#xA;            //---------------------------------------------------------------------&#xA;            Rhs.go();&#xA;&#x9;&#x9;&#x9;&#xA;            //---------------------------------------------------------------------&#xA;            //   compute the L2 norms of newton iteration residuals&#xA;            //---------------------------------------------------------------------&#xA;            L2norm.setParameters(rsdnm);&#xA;            L2norm.go();&#xA;            &#xA;            worldcomm.Barrier();&#xA;            &#xA;            Timer.resetTimer(1);&#xA;            Timer.start(1);&#xA;            &#xA;            //---------------------------------------------------------------------&#xA;            //   the timestep loop&#xA;            //---------------------------------------------------------------------&#xA;            for(istep = 1; istep&lt;= niter; istep++) &#xA;            {&#xA;                if(node == 0) &#xA;                {&#xA;                    if(mod(istep, 20) == 0 || istep == itmax || istep == 1) &#xA;                    {&#xA;                        if(niter > 1)&#xA;                            Console.WriteLine(&quot; Time step &quot;+istep);&#xA;                    }&#xA;                }&#xA;                &#xA;                //---------------------------------------------------------------------&#xA;                //   perform SSOR iteration&#xA;                //---------------------------------------------------------------------&#xA;                for(k = 1; k &lt; nz - 1; k++) &#xA;                {&#xA;                    for(j = jst+1; j &lt;= jend+1; j++) &#xA;                    {&#xA;                        for(i = ist+1; i &lt;= iend+1; i++) &#xA;                        {&#xA;                            for(m = 0; m &lt; 5; m++) &#xA;                            {&#xA;                                rsd[k, j, i, m] = dt * rsd[k, j, i, m];&#xA;//&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Console.WriteLine(&quot;rsd1[&quot; + k + &quot;,&quot; + j + &quot;,&quot; + i + &quot;,&quot; + m +&quot;] = &quot; + rsd[k, j, i, m]);&#xA;                            }&#xA;                        }&#xA;                    }&#xA;                }&#xA;                &#xA;                for(k = 2; k &lt;= nz-1; k++) &#xA;                {&#xA;                    //---------------------------------------------------------------------&#xA;                    //   form the lower triangular part of the jacobian matrix&#xA;                    //---------------------------------------------------------------------&#xA;                    Jacld.setParameters(k);&#xA;                    Jacld.go();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;                    //---------------------------------------------------------------------&#xA;                    //   perform the lower triangular solution&#xA;                    //---------------------------------------------------------------------&#xA;                    Blts_work.setParameters(k, omega);&#xA;                    Blts.go();&#xA;                }&#xA;                 &#x9;&#x9;&#x9;    &#xA;                for(k = nz-1; k >= 2; k--) &#xA;                {&#xA;                    //---------------------------------------------------------------------&#xA;                    //   form the strictly upper triangular part of the jacobian matrix&#xA;                    //---------------------------------------------------------------------&#xA;                    Jacu.setParameters(k);&#xA;                    Jacu.go();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;                    //---------------------------------------------------------------------&#xA;                    //   perform the upper triangular solution&#xA;                    //---------------------------------------------------------------------&#xA;                    Buts_work.setParameters(k, omega);&#xA;                    Buts.go();&#xA;                }&#xA;                &#xA;                //---------------------------------------------------------------------&#xA;                //   update the variables&#xA;                //---------------------------------------------------------------------&#xA;                for(k = 1; k&lt; nz-1; k++) &#xA;                {&#xA;                    for(j = jst+1; j&lt;= jend+1; j++) &#xA;                    {&#xA;                        for(i = ist+1; i&lt;= iend+1; i++) &#xA;                        {&#xA;                            for(m = 0; m&lt; 5; m++) &#xA;                            {&#xA;//   &#x9;&#x9;&#x9;&#x9;                Console.WriteLine(&quot;rsd5[&quot; + k + &quot;,&quot; + j + &quot;,&quot; + i + &quot;,&quot; + m +&quot;] = &quot; + rsd[k, j, i, m]);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//Console.WriteLine(&quot;u1[&quot; + k + &quot;,&quot; + j + &quot;,&quot; + i + &quot;,&quot; + m + &quot;] = &quot; + u[k, j, i, m]);&#xA;                                u[k, j, i, m] = u[k, j, i, m] + tmp * rsd[k, j, i, m];&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//Console.WriteLine(&quot;u2[&quot; + k + &quot;,&quot; + j + &quot;,&quot; + i + &quot;,&quot; + m + &quot;] = &quot; + u[k, j, i, m]);&#xA;                            }&#xA;                        }&#xA;                    }&#xA;                }&#xA;                &#xA;                //---------------------------------------------------------------------&#xA;                //   compute the max-norms of newton iteration corrections&#xA;                //---------------------------------------------------------------------&#xA;                if(mod(istep, inorm) == 0) &#xA;                {&#xA;                    L2norm.setParameters(delunm);&#xA;                    L2norm.go();&#xA;                }&#xA;                &#xA;                //---------------------------------------------------------------------&#xA;                //   compute the steady-state residuals&#xA;                //---------------------------------------------------------------------&#xA;                Rhs.go();&#xA;                &#xA;                //---------------------------------------------------------------------&#xA;                //   compute the max-norms of newton iteration residuals&#xA;                //---------------------------------------------------------------------&#xA;                if((mod(istep, inorm)== 0) || (istep==itmax)) &#xA;                {&#xA;                    L2norm.setParameters(rsdnm);&#xA;                    L2norm.go();&#xA;                }&#xA;                &#xA;                //---------------------------------------------------------------------&#xA;                //   check the newton-iteration residuals against the tolerance levels&#xA;                //---------------------------------------------------------------------&#xA;                if((rsdnm[0]&lt;tolrsd[0]) &amp;&amp; &#xA;                   (rsdnm[1]&lt;tolrsd[1]) &amp;&amp; &#xA;                   (rsdnm[2]&lt;tolrsd[2]) &amp;&amp; &#xA;                   (rsdnm[3]&lt;tolrsd[3]) &amp;&amp; &#xA;                   (rsdnm[4]&lt;tolrsd[4])) &#xA;                {&#xA;                    &#xA;                }&#xA;            }&#xA;            &#xA;            Timer.stop(1);&#xA;            wtime = Timer.readTimer(1);&#xA;            &#xA;            maxtime = worldcomm.Allreduce&lt;double>(wtime, MPI.Operation&lt;double>.Max);&#xA;            &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public static double mod(double a, double b) { return (a % b); }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public void setParameters(int niter)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;   this.niter = niter;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected double[] rsdnm;&#xA;&#x9;&#x9;protected double maxtime;&#xA;&#x9;&#x9;public double[] Rsdnm { get{ return rsdnm; } }&#xA;&#x9;&#x9;public double Maxtime { get{ return maxtime; } }&#xA;&#x9;}&#xA;}&#xA;" fileType="library" name="ISSORImpl.cs" srcType="user" uri="impl.lu.ssor.SSORImpl/bin/1.0.0.0/ISSORImpl.dll" versionId="1.0.0.0">
          <dependency>lu.problem_size.Instance_LU/bin/1.0.0.0/IInstance_LU.dll</dependency>
          <dependency>common.problem_size.Class/bin/1.0.0.0/IClass.dll</dependency>
          <dependency>%WORKSPACE/impl.lu.ssor.SSORImpl/bin/1.0.0.0/BaseISSORImpl.dll</dependency>
          <dependency>lu.ssor.SSOR/bin/1.0.0.0/ISSOR.dll</dependency>
          <externalDependency>MPI</externalDependency>
        </file>
      </sources>
      <visualDescription h="91" w="147" x="52" y="98">
        <color b="255" g="128" r="0"/>
      </visualDescription>
      <port name="blocks_info">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="blocks_info" sRef="rhs"/>
      </port>
      <port name="problem_data">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="problem_data" sRef="rhs"/>
      </port>
      <port name="mpi">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="mpi" sRef="rhs"/>
      </port>
      <port name="topology">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="topology" sRef="rhs"/>
      </port>
      <port name="y">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="topology" sRef="rhs"/>
      </port>
      <port name="x">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="topology" sRef="rhs"/>
      </port>
      <port name="blocks_info">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="blocks_info" sRef="l2norm"/>
      </port>
      <port name="problem_data">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="problem_data" sRef="l2norm"/>
      </port>
      <port name="mpi">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="mpi" sRef="l2norm"/>
      </port>
      <port name="blocks_info">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="blocks_info" sRef="jacld"/>
      </port>
      <port name="problem_data">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="problem_data" sRef="jacld"/>
      </port>
      <port name="blocks_info">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="blocks_info" sRef="jacu"/>
      </port>
      <port name="problem_data">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="problem_data" sRef="jacu"/>
      </port>
      <port name="mpi">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="mpi" sRef="timer"/>
      </port>
      <port name="mpi">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="mpi" sRef="buts"/>
      </port>
      <port name="y">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice sRef="buts"/>
      </port>
      <port name="x">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice sRef="buts"/>
      </port>
      <port name="problem_data">
        <visualDescription h="10" w="10" x="109" y="89"/>
        <slice sRef="buts"/>
      </port>
      <port name="blocks_info">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice sRef="buts"/>
      </port>
      <port name="blocks_info">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice sRef="blts"/>
      </port>
      <port name="y">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice sRef="blts"/>
      </port>
      <port name="problem_data">
        <visualDescription h="10" w="10" x="109" y="89"/>
        <slice sRef="blts"/>
      </port>
      <port name="x">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice sRef="blts"/>
      </port>
      <port name="mpi">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="mpi" sRef="blts"/>
      </port>
      <externalReferences>MPI</externalReferences>
      <parameter iname="IInstance_LU" order="0" parid="instance_type" uname="instance" varid="I"/>
      <parameter iname="IClass" order="1" parid="class" uname="class" varid="C"/>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <unit iRef="ISSORImpl" multiple="true" private="false" replica="0" uRef="ssor" visibleInterface="true">
      <super cRef="base" uRef="ssor"/>
      <visualDescription h="54" w="105" x="206" y="235"/>
    </unit>
  </componentInfo>
</component:component>