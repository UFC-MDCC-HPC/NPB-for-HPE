<?xml version="1.0" encoding="ASCII"?>
<component:component xmlns:component="http://www.example.org/HashComponent">
  <header hash_component_UID="002400000480000094000000060200000024000052534131000400001100000047429777c6ae7ac5758b45b09c5303b2abb5d19a23bd2b7d84bf40002dc4c3ceb5c030bdc5ed02a31da8cf8ed62b329f014d3b0f994e2aeb6cc21014ef709af35b607cfae5fc1da87f8b24b7d46993e8aa2513129e957625938a63bc228a1e4f2b3f06c7e406baf5b2d3b0ae62a362e6abb360d86b0eab51f7e36fa5e2dafb88" isAbstract="false" kind="Computation" name="ZSolverCell" packagePath="impl.bt.solve">
    <baseType>
      <extensionType>
        <implements>true</implements>
      </extensionType>
      <component hash_component_UID="002400000480000094000000060200000024000052534131000400001100000085d41542940741460bcbb9c79aa04f1a26d61f6ab4f70cd68afb7cc856189bb278afa64f13159ea4de45f056c1e857cf17da63e85a3c38743e53f3f57e2e0c5d105cac8eba4d9c6bf8bb913b6060788005d6acbd793f9007b727493ca2ff0ebf11b41c5fa16009b0395aabdb5e103619402465840321e9767a5b3585862337b3" localRef="base" location="bt.solve.SolverCell/SolverCell.hpe" name="SolverCell" package="bt.solve" version="1.0.0.0">
        <visualDescription h="30" w="50" x="251" y="434">
          <color b="255" g="255" r="255"/>
        </visualDescription>
        <parameter formFieldId="instance_type" varName="I"/>
        <parameter formFieldId="axis" varName="DIR"/>
        <parameter formFieldId="class" varName="C"/>
        <parameter formFieldId="method" varName="MTH"/>
        <port hash_component_UID="002400000480000094000000060200000024000052534131000400001100000009b97ce4f3981d78e251ff90894751a2f19e3d7fcafeadee8da1cb93890a7d9ed59b4773f575afc0782c61b877ac17cea1ab4429bfd162c1bdff0b6c7fe9d07f8e9ccdcd219b58671c77cf6cfbada633e18309cb4c2e518fedeaa6aecf435a12dc4a18c8384c15d61dfab5a2056f58c2bcf936823b8d84a8c5cc5e25827a1598" localRef="problem_data" location="adi.data.ProblemDefinition/ProblemDefinition.hpe" multiple="false" name="ProblemDefinition" package="adi.data" exposed="true">
          <visualDescription h="42" w="115" x="386" y="433">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="instance_type" varName="I"/>
          <parameter formFieldId="class" varName="C"/>
          <unitBounds parallel="true" uRef="problem">
            <visualDescription h="10" w="10" x="5" y="2"/>
          </unitBounds>
        </port>
        <port hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000cfe94b8926d4a7de4f70d204303375a68658c9c988f5e0ec7f1f3dce28b75501399411f8002d0637e06b03a2849ef779a22e26ae137759213f595fd13ccb5101bb6f07e7560df0d8b1beadc8dacecefd49c7844d298e78991b98dd4650ec7bf0b26716727a7bc437f39a5ccede87c7db6829de68c511abb9d0b4e3644bcf66ad" localRef="cells_info" location="common.datapartition.MultiPartitionCells/MultiPartitionCells.hpe" multiple="true" name="MultiPartitionCells" package="common.datapartition" exposed="true">
          <visualDescription h="42" w="86" x="86" y="438">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds parallel="false" uRef="cells">
            <visualDescription h="10" w="10" x="5" y="2"/>
          </unitBounds>
        </port>
        <port hash_component_UID="00240000048000009400000006020000002400005253413100040000110000005b86e947f0c8ff58a018885f506e053867ca3d393fe1cd5e1ec93a51a743248bfe402f5db64de0f83584c891c751c5372e47815b771be3794141e0b3015a36de18d2d19e785500ed9eb00c8e374ef02a660d9fd575b434d9f216339ff6dd62602fa43a397fa0e12d50219bc7c0626be2392c1384f5b5211eecfe655385887eaa" localRef="iteration_control" location="adi.solve.IterationControl/IterationControl.hpe" multiple="false" name="IterationControl" package="adi.solve" exposed="true">
          <visualDescription h="60" w="100" x="282" y="423">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <parameter formFieldId="direction" varName="X###1353876956271"/>
          <unitBounds parallel="true" uRef="iteration_control">
            <visualDescription h="20" w="20" x="5" y="2"/>
          </unitBounds>
        </port>
        <port hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000c90ba34c6d313b818aac11c636e470def5f587fff1cf51da772f229fa1a9a60a2d5a56c7f27473991211353d5bc4c0cdec5acc9a2cb24392dc07e20dad02de68c4525f09d59756dcec506d34934b5a1206f3e86894dd3215f99456e36e93f8eee349bf44a29a3e56f37f4c5ffaeee5b79060a8c9e6d31144c2739d08fb07b8b8" localRef="lhsc" location="common.data.Field/Field.hpe" multiple="false" name="Field" package="common.data" exposed="true">
          <visualDescription h="60" w="100" x="71" y="326">
            <color b="255" g="255" r="255"/>
          </visualDescription>
          <unitBounds parallel="false" uRef="field">
            <visualDescription h="20" w="20" x="5" y="2"/>
          </unitBounds>
        </port>
        <unitBounds parallel="true" uRef="solve_cell">
          <visualDescription h="10" w="10" x="5" y="2"/>
        </unitBounds>
      </component>
    </baseType>
    <versions field1="1" field2="0" field3="0" field4="0"/>
    <visualAttributes>
      <color b="255" g="255" r="255"/>
    </visualAttributes>
  </header>
  <componentInfo>
    <innerComponent hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000bf53b0511383425a287205701028bd02468fc3d7e016187e316b324317e52a13e4ef0306034cc0f1612eac77c8c89171d233ab624d7f88cf7617781ea97fa7fcba7539b5065ba46eeb6fa2c58d5cc8c4bac53ea60ddac7bab5ad64d967540e78947590eeb466137ff49b1db9e8e77e8207f5e253a70d62b1914edf8cbfcfc0a4" localRef="instance_type" location="bt.problem_size.Instance_BT/Instance_BT.hpe" multiple="false" name="Instance_BT" package="bt.problem_size" exposed="false">
      <visualDescription h="60" w="119" x="174" y="112">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <parameter formFieldId="class" varName="C"/>
      <unitBounds parallel="false" uRef="instance">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent hash_component_UID="0024000004800000940000000602000000240000525341310004000011000000237f437b205f7bfa00c2d0b40167897c37f84c96a62c077e2832a5360fa8c1c7438dfa969d99bb36a48a7baefcbd50d84ae2e3e71a349dce24c2b0bc473997871be48fdb29d0d48b0928ca968440c6b6663c6740810dab7b664db0e0cfbfe5b21f223402d0d9bd601294898724b6a1da46e78261ef1ee37ac63ca9b2dbdc0d90" localRef="class" location="common.problem_size.Class/Class.hpe" multiple="false" name="Class" package="common.problem_size" exposed="false">
      <visualDescription h="30" w="50" x="501" y="157">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds parallel="false" uRef="class">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent hash_component_UID="002400000480000094000000060200000024000052534131000400001100000003bb781674ea675f3e73d687d81c2a1fc30c172ba4dc5abb7591c0493b3e0f7a440be50941862ce7b3d1d6a7d57a55f20f8929f9f272be575cb8c2735e6faaeb2aa7c8b4cdc19e0c763e7a660a9c4cce5993fd57a435000e7717204249b8b85fac784054d914d6776215ae09ebe843efcc400849f526412b1a2b2209ff2903ce" localRef="axis" location="common.axis.ZAxis/ZAxis.hpe" multiple="false" name="ZAxis" package="common.axis" exposed="false">
      <visualDescription h="46" w="90" x="428" y="205">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds parallel="true" uRef="z">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <innerComponent hash_component_UID="002400000480000094000000060200000024000052534131000400001100000025529ab026e77dd546c5f94e76127e76d2c281e7bdedc252d61f6953b04f54d154593621b2aef59dcd634eb5fd324c6e2ad6536ac74f2cdeb85f88c97805cf25c77d65ca931e199c09fa9424a481585529fd2e43b58709ac4c948c2b5b81be648a3f130bd9795324dc2c04a3d5143030b3afa496239772cd9f2e7d3d9a599082" localRef="method" location="bt.solve.BTMethod/BTMethod.hpe" multiple="false" name="BTMethod" package="bt.solve" exposed="false">
      <visualDescription h="30" w="50" x="391" y="270">
        <color b="255" g="255" r="255"/>
      </visualDescription>
      <unitBounds parallel="true" uRef="method">
        <visualDescription h="10" w="10" x="5" y="2"/>
      </unitBounds>
    </innerComponent>
    <supplyParameter cRef="class" varName="C"/>
    <supplyParameter cRef="axis" varName="DIR"/>
    <supplyParameter cRef="method" varName="MTH"/>
    <supplyParameter cRef="instance_type" varName="I"/>
    <interface iRef="IZSolverCell" nArgs="4">
      <slice isRef="iteration_control">
        <originRef cRef="iteration_control" iRef="IIterationControl"/>
        <visualDescription h="10" w="10" x="42" y="14"/>
      </slice>
      <slice isRef="lhsc">
        <originRef cRef="lhsc" iRef="IField"/>
        <visualDescription h="10" w="10" x="27" y="28"/>
      </slice>
      <slice isRef="cells_info">
        <originRef cRef="cells_info" iRef="ICells"/>
        <visualDescription h="10" w="10" x="25" y="1"/>
      </slice>
      <slice isRef="problem_data">
        <originRef cRef="problem_data" iRef="IProblemDefinition"/>
        <visualDescription h="10" w="10" x="44" y="0"/>
      </slice>
      <slice isRef="lhsabinit">
        <originRef cRef="lhsabinit" iRef="ILhsABInit"/>
        <visualDescription h="10" w="10" x="60" y="19"/>
      </slice>
      <slice isRef="axis">
        <originRef cRef="axis" iRef="IAxis"/>
        <visualDescription h="10" w="10" x="42" y="26"/>
      </slice>
      <slice isRef="method">
        <originRef cRef="method" iRef="ISolvingMethod"/>
        <visualDescription h="10" w="10" x="11" y="21"/>
      </slice>
      <slice isRef="binvcrhs">
        <originRef cRef="binvcrhs" iRef="IBinvcRhs"/>
        <visualDescription h="10" w="10" x="62" y="4"/>
      </slice>
      <slice isRef="binvrhs">
        <originRef cRef="binvrhs" iRef="IBinvRhs"/>
        <visualDescription h="10" w="10" x="65" y="30"/>
      </slice>
      <slice isRef="matmulsub">
        <originRef cRef="matmulsub" iRef="IMatMulSub"/>
        <visualDescription h="10" w="10" x="53" y="28"/>
      </slice>
      <slice isRef="matvecsub">
        <originRef cRef="matvecsub" iRef="IMatVecSub"/>
        <visualDescription h="10" w="10" x="22" y="25"/>
      </slice>
      <sources sourceType="C# Language" versionId="1.0.0.0">
        <file contents="/* Automatically Generated Code */&#xA;&#xA;using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using common.datapartition.MultiPartitionCells;&#xA;using adi.data.ProblemDefinition;&#xA;using bt.problem_size.Instance_BT;&#xA;using common.problem_size.Class;&#xA;using bt.solve.BinvRhs;&#xA;using bt.solve.BTMethod;&#xA;using bt.solve.MatMulSub;&#xA;using common.axis.Axis;&#xA;using bt.solve.LhsABInit;&#xA;using bt.solve.BinvcRhs;&#xA;using bt.solve.MatVecSub;&#xA;using common.axis.ZAxis;&#xA;using bt.solve.SolverCell;&#xA;using adi.solve.IterationControl;&#xA;using common.direction.Forward;&#xA;using common.data.Field;&#xA;&#xA;namespace impl.bt.solve.ZSolverCell { &#xA;&#x9;public abstract class BaseIZSolverCell&lt;I, C, DIR, MTH>: Computation, BaseISolverCell&lt;I, C, DIR, MTH>&#xA;&#x9;where I:IInstance_BT&lt;C>&#xA;&#x9;where C:IClass&#xA;&#x9;where DIR:IZ&#xA;&#x9;where MTH:IBTMethod {&#xA;&#x9;&#x9;#region data&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;protected int MAX_CELL_DIM, KMAX, JMAX, IMAX, maxcells;&#xA;&#x9;&#x9;&#x9;protected int[,] start, end, cell_size, slice;&#xA;&#x9;&#x9;&#x9;protected double[,,,,] rho_i, u, qs, rhs; &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;protected double tx1, tx2, tx3, ty1, ty2, ty3, tz1, tz2, tz3,&#xA;&#x9;&#x9;&#x9;                  c1, c2, c3, c4, c5,&#xA;&#x9;&#x9;&#x9;                  c3c4, con43, c1345, dt,&#xA;&#x9;&#x9;&#x9;                  dx1, dx2, dx3, dx4, dx5, dy1, dy2, dy3, dy4, dy5, dz1, dz2, dz3, dz4, dz5;&#xA;            protected double[,,] fjac, njac, lhsa, lhsb;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;protected double[,,,,,] lhsc;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;override public void initialize()&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;            start = Cells.cell_start;&#xA;&#x9;&#x9;&#x9;&#x9;end = Cells.cell_end;&#xA;&#x9;&#x9;&#x9;&#x9;cell_size = Cells.cell_size;&#xA;&#x9;&#x9;&#x9;&#x9;slice = Cells.cell_slice;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;MAX_CELL_DIM = Problem.MAX_CELL_DIM;&#xA;&#x9;&#x9;&#x9;&#x9;KMAX = Problem.KMAX;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;            rho_i = Problem.Field_rho;&#xA;&#x9;&#x9;&#x9;&#x9;qs = Problem.Field_qs;&#x9;            &#xA;&#x9;&#x9;&#x9;&#x9;u = Problem.Field_u;&#xA;&#x9;&#x9;&#x9;&#x9;rhs = Problem.Field_rhs;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;tx1 = Constants.tx1;&#xA;&#x9;&#x9;&#x9;&#x9;tx2 = Constants.tx2;&#xA;&#x9;&#x9;&#x9;&#x9;tx3 = Constants.tx3;&#xA;&#x9;&#x9;&#x9;&#x9;ty1 = Constants.ty1;&#xA;&#x9;&#x9;&#x9;&#x9;ty2 = Constants.ty2;&#xA;&#x9;&#x9;&#x9;&#x9;ty3 = Constants.ty3;&#xA;&#x9;&#x9;&#x9;&#x9;tz1 = Constants.tz1;&#xA;&#x9;&#x9;&#x9;&#x9;tz2 = Constants.tz2;&#xA;&#x9;&#x9;&#x9;&#x9;tz3 = Constants.tz3;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;c1 = Constants.c1;&#xA;&#x9;&#x9;&#x9;&#x9;c2 = Constants.c2;&#xA;&#x9;&#x9;&#x9;&#x9;c3 = Constants.c3;&#xA;&#x9;&#x9;&#x9;&#x9;c4 = Constants.c4;&#xA;&#x9;&#x9;&#x9;&#x9;c5 = Constants.c5;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;c3c4 = Constants.c3c4;&#xA;&#x9;&#x9;&#x9;&#x9;con43 = Constants.con43;&#xA;&#x9;&#x9;&#x9;&#x9;c1345 = Constants.c1345;&#xA;&#x9;&#x9;&#x9;&#x9;dt = Constants.dt;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;dx1 = Constants.dx1;&#xA;&#x9;&#x9;&#x9;&#x9;dx2 = Constants.dx2;&#xA;&#x9;&#x9;&#x9;&#x9;dx3 = Constants.dx3;&#xA;&#x9;&#x9;&#x9;&#x9;dx4 = Constants.dx4;&#xA;&#x9;&#x9;&#x9;&#x9;dx5 = Constants.dx5;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;dy1 = Constants.dy1;&#xA;&#x9;&#x9;&#x9;&#x9;dy2 = Constants.dy2;&#xA;&#x9;&#x9;&#x9;&#x9;dy3 = Constants.dy3;&#xA;&#x9;&#x9;&#x9;&#x9;dy4 = Constants.dy4;&#xA;&#x9;&#x9;&#x9;&#x9;dy5 = Constants.dy5;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;dz1 = Constants.dz1;&#xA;&#x9;&#x9;&#x9;&#x9;dz2 = Constants.dz2;&#xA;&#x9;&#x9;&#x9;&#x9;dz3 = Constants.dz3;&#xA;&#x9;&#x9;&#x9;&#x9;dz4 = Constants.dz4;&#xA;&#x9;&#x9;&#x9;&#x9;dz5 = Constants.dz5;&#xA;&#x9;&#x9;&#x9;&#xA;                fjac = new double[MAX_CELL_DIM+5, 5, 5];&#xA;                njac = new double[MAX_CELL_DIM+5, 5, 5];&#xA;                lhsa = new double[MAX_CELL_DIM+3, 5, 5];&#xA;                lhsb = new double[MAX_CELL_DIM+3, 5, 5];&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Iteration_control.setNumberOfStages(Cells.ncells);&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;KMAX = Problem.KMAX;&#xA;&#x9;&#x9;&#x9;&#x9;JMAX = Problem.JMAX;&#xA;&#x9;&#x9;&#x9;&#x9;IMAX = Problem.IMAX;&#xA;&#x9;&#x9;&#x9;&#x9;maxcells = Problem.maxcells;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Lhsc.initialize_field(&quot;lhsc&quot;, maxcells, KMAX+2, JMAX+2, IMAX+2, 5, 5);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;#endregion&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IField lhsc_ = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected IField Lhsc {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (lhsc_ == null) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;lhsc_ = (IField) Services.getPort(&quot;lhsc&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return lhsc_;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IIterationControl&lt;IForwardDirection> iteration_control = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public IIterationControl&lt;IForwardDirection> Iteration_control {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.iteration_control == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.iteration_control = (IIterationControl&lt;IForwardDirection>) Services.getPort(&quot;iteration_control&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.iteration_control;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private ICells cells = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public ICells Cells {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.cells == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.cells = (ICells) Services.getPort(&quot;cells_info&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.cells;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IProblemDefinition&lt;I, C> problem = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public IProblemDefinition&lt;I, C> Problem {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.problem == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.problem = (IProblemDefinition&lt;I, C>) Services.getPort(&quot;problem_data&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.problem;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IBinvRhs&lt;MTH> binvrhs = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected IBinvRhs&lt;MTH> Binvrhs {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.binvrhs == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.binvrhs = (IBinvRhs&lt;MTH>) Services.getPort(&quot;binvrhs&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.binvrhs;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IMatMulSub&lt;MTH> matmul_sub = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected IMatMulSub&lt;MTH> Matmul_sub {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.matmul_sub == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.matmul_sub = (IMatMulSub&lt;MTH>) Services.getPort(&quot;matmulsub&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.matmul_sub;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private DIR axis = default(DIR);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected DIR Axis {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.axis == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.axis = (DIR) Services.getPort(&quot;axis&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.axis;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private ILhsABInit lhsabinit = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected ILhsABInit Lhsabinit {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.lhsabinit == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.lhsabinit = (ILhsABInit) Services.getPort(&quot;lhsabinit&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.lhsabinit;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IBinvcRhs&lt;MTH> binvcrhs = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected IBinvcRhs&lt;MTH> Binvcrhs {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.binvcrhs == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.binvcrhs = (IBinvcRhs&lt;MTH>) Services.getPort(&quot;binvcrhs&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.binvcrhs;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private MTH method = default(MTH);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected MTH Method {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.method == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.method = (MTH) Services.getPort(&quot;method&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.method;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private IMatVecSub&lt;MTH> matvec_sub = null;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;protected IMatVecSub&lt;MTH> Matvec_sub {&#xA;&#x9;&#x9;&#x9;get {&#xA;&#x9;&#x9;&#x9;&#x9;if (this.matvec_sub == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.matvec_sub = (IMatVecSub&lt;MTH>) Services.getPort(&quot;matvecsub&quot;);&#xA;&#x9;&#x9;&#x9;&#x9;return this.matvec_sub;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public static double pow2(double p) { return p * p; }&#xA;&#x9;&#x9;&#xA;&#x9;&#x9; &#xA;&#x9;}&#xA;}&#xA;" fileType="library" name="BaseIZSolverCell.cs" srcType="base" uri="impl.bt.solve.ZSolverCell/bin/1.0.0.0/BaseIZSolverCell.dll" versionId="1.0.0.0">
          <dependency>common.datapartition.MultiPartitionCells/bin/1.0.0.0/ICells.dll</dependency>
          <dependency>adi.data.ProblemDefinition/bin/1.0.0.0/IProblemDefinition.dll</dependency>
          <dependency>bt.problem_size.Instance_BT/bin/1.0.0.0/IInstance_BT.dll</dependency>
          <dependency>common.problem_size.Class/bin/1.0.0.0/IClass.dll</dependency>
          <dependency>bt.solve.BinvRhs/bin/1.0.0.0/IBinvRhs.dll</dependency>
          <dependency>bt.solve.BTMethod/bin/1.0.0.0/IBTMethod.dll</dependency>
          <dependency>bt.solve.MatMulSub/bin/1.0.0.0/IMatMulSub.dll</dependency>
          <dependency>common.axis.Axis/bin/1.0.0.0/IAxis.dll</dependency>
          <dependency>bt.solve.LhsABInit/bin/1.0.0.0/ILhsABInit.dll</dependency>
          <dependency>bt.solve.BinvcRhs/bin/1.0.0.0/IBinvcRhs.dll</dependency>
          <dependency>common.solve.Method/bin/1.0.0.0/IMethod.dll</dependency>
          <dependency>bt.solve.MatVecSub/bin/1.0.0.0/IMatVecSub.dll</dependency>
          <dependency>common.axis.ZAxis/bin/1.0.0.0/IZ.dll</dependency>
          <dependency>bt.solve.SolveCell/bin/1.0.0.0/BaseISolveCell.dll</dependency>
        </file>
        <file contents="using System;&#xA;using br.ufc.pargo.hpe.backend.DGAC;&#xA;using br.ufc.pargo.hpe.basic;&#xA;using br.ufc.pargo.hpe.kinds;&#xA;using bt.problem_size.Instance_BT;&#xA;using common.problem_size.Class;&#xA;using common.axis.ZAxis;&#xA;using bt.solve.BTMethod;&#xA;using bt.solve.SolverCell;&#xA;&#xA;namespace impl.bt.solve.ZSolverCell &#xA;{ &#xA;&#x9;public class IZSolverCell&lt;I, C, DIR, MTH> : BaseIZSolverCell&lt;I, C, DIR, MTH>, ISolverCell&lt;I, C, DIR, MTH>&#xA;&#x9;where I:IInstance_BT&lt;C>&#xA;&#x9;where C:IClass&#xA;&#x9;where DIR:IZ&#xA;&#x9;where MTH:IBTMethod &#xA;&#x9;{&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;private int first;&#xA;&#x9;&#x9;private int last;&#xA;&#x9;&#x9;private int c;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;public override void main() &#xA;&#x9;&#x9;{ &#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;lhsc = Lhsc.Field6;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;int stage = this.Iteration_control.getCurrentStage();&#xA;&#x9;&#x9;&#x9;first = this.Iteration_control.is_first_stage() ? 1 : 0;&#xA;&#x9;&#x9;&#x9;last = this.Iteration_control.is_last_stage() ? 1 : 0;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;c = slice[stage,2];&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;            int i, j, k, isize, ksize, jsize, kstart;&#xA;            double tmp1, tmp2, tmp3;&#xA;            double[,] utmp = new double[KMAX + 4, 7];   &#xA;            kstart = 2;&#xA;            isize = cell_size[c, 0] - end[c, 0] + 1;&#xA;            jsize = cell_size[c, 1] - end[c, 1] + 1;&#xA;            ksize = cell_size[c, 2] + 1;&#xA;&#xA;            Lhsabinit.setParameters(lhsa, lhsb, ksize); &#xA;            Lhsabinit.go();&#xA;&#xA;            for(j = start[c, 1]; j &lt;= jsize; j++) &#xA;            {&#xA;                for(i = start[c, 0]; i &lt;= isize; i++) &#xA;                {&#xA;                    for(k = start[c, 2]-1; k &lt;= cell_size[c, 2] - end[c, 2]+2; k++) &#xA;                    {&#xA;                        utmp[k, 1] = 1.0d / u[c, k, j, i, 0];  &#xA;                        utmp[k, 2] = u[c, k, j, i, 1];  &#xA;                        utmp[k, 3] = u[c, k, j, i, 2];  &#xA;                        utmp[k, 4] = u[c, k, j, i, 3];  &#xA;                        utmp[k, 5] = u[c, k, j, i, 4];  &#xA;                        utmp[k, 6] = qs[c, k, j, i,0];  &#xA;                    }&#xA;                    for(k = start[c, 2]-1; k &lt;= cell_size[c, 2] - end[c, 2]+2; k++) &#xA;                    {&#xA;                        tmp1 = utmp[k, 1];&#xA;                        tmp2 = tmp1 * tmp1;&#xA;                        tmp3 = tmp1 * tmp2;&#xA;&#xA;                        fjac[k+1, 0, 0] = 0.0d;   &#xA;                        fjac[k+1, 1, 0] = 0.0d;&#xA;                        fjac[k+1, 2, 0] = 0.0d;&#xA;                        fjac[k+1, 3, 0] = 1.0d;&#xA;                        fjac[k+1, 4, 0] = 0.0d;&#xA;&#xA;                        fjac[k+1, 0, 1] = -(utmp[k, 2] * utmp[k, 4]) * tmp2;&#xA;                        fjac[k+1, 1, 1] = utmp[k, 4] * tmp1;&#xA;                        fjac[k+1, 2, 1] = 0.0d;&#xA;                        fjac[k+1, 3, 1] = utmp[k, 2] * tmp1;&#xA;                        fjac[k+1, 4, 1] = 0.0d;&#xA;&#xA;                        fjac[k+1, 0, 2] = -(utmp[k, 3] * utmp[k, 4]) * tmp2;&#xA;                        fjac[k+1, 1, 2] = 0.0d;&#xA;                        fjac[k+1, 2, 2] = utmp[k, 4] * tmp1;&#xA;                        fjac[k+1, 3, 2] = utmp[k, 3] * tmp1;&#xA;                        fjac[k+1, 4, 2] = 0.0d;&#xA;&#xA;                        fjac[k+1, 0, 3] = -(utmp[k, 4] * utmp[k, 4] * tmp2) + c2 * utmp[k, 6];&#xA;                        fjac[k+1, 1, 3] = -c2 * utmp[k, 2] * tmp1;&#xA;                        fjac[k+1, 2, 3] = -c2 * utmp[k, 3] * tmp1;&#xA;                        fjac[k+1, 3, 3] = (2.0d - c2) * utmp[k, 4] * tmp1;&#xA;                        fjac[k+1, 4, 3] = c2;&#xA;&#xA;                        fjac[k+1, 0, 4] = (c2 * 2.0d * utmp[k, 6] - c1 * (utmp[k, 5] * tmp1)) * (utmp[k, 4] * tmp1);&#xA;                        fjac[k+1, 1, 4] = -c2 * (utmp[k, 2] * utmp[k, 4]) * tmp2;&#xA;                        fjac[k+1, 2, 4] = -c2 * (utmp[k, 3] * utmp[k, 4]) * tmp2;&#xA;                        fjac[k+1, 3, 4] = c1 * (utmp[k, 5] * tmp1) - c2 * (utmp[k, 6] + utmp[k, 4] * utmp[k, 4] * tmp2);&#xA;                        fjac[k+1, 4, 4] = c1 * utmp[k, 4] * tmp1;&#xA;&#xA;                        njac[k+1, 0, 0] = 0.0d;&#xA;                        njac[k+1, 1, 0] = 0.0d;&#xA;                        njac[k+1, 2, 0] = 0.0d;&#xA;                        njac[k+1, 3, 0] = 0.0d;&#xA;                        njac[k+1, 4, 0] = 0.0d;&#xA;&#xA;                        njac[k+1, 0, 1] = -c3c4 * tmp2 * utmp[k, 2];&#xA;                        njac[k+1, 1, 1] = c3c4 * tmp1;&#xA;                        njac[k+1, 2, 1] = 0.0d;&#xA;                        njac[k+1, 3, 1] = 0.0d;&#xA;                        njac[k+1, 4, 1] = 0.0d;&#xA;&#xA;                        njac[k+1, 0, 2] = -c3c4 * tmp2 * utmp[k, 3];&#xA;                        njac[k+1, 1, 2] = 0.0d;&#xA;                        njac[k+1, 2, 2] = c3c4 * tmp1;&#xA;                        njac[k+1, 3, 2] = 0.0d;&#xA;                        njac[k+1, 4, 2] = 0.0d;&#xA;&#xA;                        njac[k+1, 0, 3] = -con43 * c3c4 * tmp2 * utmp[k, 4];&#xA;                        njac[k+1, 1, 3] = 0.0d;&#xA;                        njac[k+1, 2, 3] = 0.0d;&#xA;                        njac[k+1, 3, 3] = con43 * c3 * c4 * tmp1;&#xA;                        njac[k+1, 4, 3] = 0.0d;&#xA;&#xA;                        njac[k+1, 0, 4] = -(c3c4 - c1345) * tmp3 * (pow2(utmp[k, 2])) -&#xA;                                        (c3c4 - c1345) * tmp3 * (pow2(utmp[k, 3])) - (con43 * c3c4 - c1345) * tmp3 * (pow2(utmp[k, 4])) - c1345 * tmp2 * utmp[k, 5];&#xA;&#xA;                        njac[k+1, 1, 4] = (c3c4 - c1345) * tmp2 * utmp[k, 2];&#xA;                        njac[k+1, 2, 4] = (c3c4 - c1345) * tmp2 * utmp[k, 3];&#xA;                        njac[k+1, 3, 4] = (con43 * c3c4 - c1345) * tmp2 * utmp[k, 4];&#xA;                        njac[k+1, 4, 4] = (c1345) * tmp1;&#xA;                    }&#xA;                    &#xA;                    for(k = start[c, 2]; k &lt;= ksize - end[c, 2]; k++) &#xA;                    {                       &#xA;                        tmp1 = dt * tz1;&#xA;                        tmp2 = dt * tz2;&#xA;                        lhsa[k, 0, 0] = -tmp2 * fjac[k, 0, 0] - tmp1 * njac[k, 0, 0] - tmp1 * dz1;&#xA;                        lhsa[k, 1, 0] = -tmp2 * fjac[k, 1, 0] - tmp1 * njac[k, 1, 0];    &#xA;                        lhsa[k, 2, 0] = -tmp2 * fjac[k, 2, 0] - tmp1 * njac[k, 2, 0];&#xA;                        lhsa[k, 3, 0] = -tmp2 * fjac[k, 3, 0] - tmp1 * njac[k, 3, 0];&#xA;                        lhsa[k, 4, 0] = -tmp2 * fjac[k, 4, 0] - tmp1 * njac[k, 4, 0];&#xA;&#xA;                        lhsa[k, 0, 1] = -tmp2 * fjac[k, 0, 1] - tmp1 * njac[k, 0, 1];&#xA;                        lhsa[k, 1, 1] = -tmp2 * fjac[k, 1, 1] - tmp1 * njac[k, 1, 1] - tmp1 * dz2;&#xA;                        lhsa[k, 2, 1] = -tmp2 * fjac[k, 2, 1] - tmp1 * njac[k, 2, 1];&#xA;                        lhsa[k, 3, 1] = -tmp2 * fjac[k, 3, 1] - tmp1 * njac[k, 3, 1];&#xA;                        lhsa[k, 4, 1] = -tmp2 * fjac[k, 4, 1] - tmp1 * njac[k, 4, 1];&#xA;&#xA;                        lhsa[k, 0, 2] = -tmp2 * fjac[k, 0, 2] - tmp1 * njac[k, 0, 2];&#xA;                        lhsa[k, 1, 2] = -tmp2 * fjac[k, 1, 2] - tmp1 * njac[k, 1, 2];&#xA;                        lhsa[k, 2, 2] = -tmp2 * fjac[k, 2, 2] - tmp1 * njac[k, 2, 2] - tmp1 * dz3;&#xA;                        lhsa[k, 3, 2] = -tmp2 * fjac[k, 3, 2] - tmp1 * njac[k, 3, 2];&#xA;                        lhsa[k, 4, 2] = -tmp2 * fjac[k, 4, 2] - tmp1 * njac[k, 4, 2];&#xA;&#xA;                        lhsa[k, 0, 3] = -tmp2 * fjac[k, 0, 3] - tmp1 * njac[k, 0, 3];&#xA;                        lhsa[k, 1, 3] = -tmp2 * fjac[k, 1, 3] - tmp1 * njac[k, 1, 3];&#xA;                        lhsa[k, 2, 3] = -tmp2 * fjac[k, 2, 3] - tmp1 * njac[k, 2, 3];&#xA;                        lhsa[k, 3, 3] = -tmp2 * fjac[k, 3, 3] - tmp1 * njac[k, 3, 3] - tmp1 * dz4;&#xA;                        lhsa[k, 4, 3] = -tmp2 * fjac[k, 4, 3] - tmp1 * njac[k, 4, 3];&#xA;&#xA;                        lhsa[k, 0, 4] = -tmp2 * fjac[k, 0, 4] - tmp1 * njac[k, 0, 4];&#xA;                        lhsa[k, 1, 4] = -tmp2 * fjac[k, 1, 4] - tmp1 * njac[k, 1, 4];&#xA;                        lhsa[k, 2, 4] = -tmp2 * fjac[k, 2, 4] - tmp1 * njac[k, 2, 4];&#xA;                        lhsa[k, 3, 4] = -tmp2 * fjac[k, 3, 4] - tmp1 * njac[k, 3, 4];&#xA;                        lhsa[k, 4, 4] = -tmp2 * fjac[k, 4, 4] - tmp1 * njac[k, 4, 4] - tmp1 * dz5;&#xA;&#xA;                        lhsb[k, 0, 0] = 1.0d + tmp1 * 2.0d * njac[k+1, 0, 0] + tmp1 * 2.0d * dz1; &#xA;                        lhsb[k, 1, 0] = tmp1 * 2.0d * njac[k+1, 1, 0];&#xA;                        lhsb[k, 2, 0] = tmp1 * 2.0d * njac[k+1, 2, 0];&#xA;                        lhsb[k, 3, 0] = tmp1 * 2.0d * njac[k+1, 3, 0];&#xA;                        lhsb[k, 4, 0] = tmp1 * 2.0d * njac[k+1, 4, 0];&#xA;&#xA;                        lhsb[k, 0, 1] = tmp1 * 2.0d * njac[k+1, 0, 1];&#xA;                        lhsb[k, 1, 1] = 1.0d + tmp1 * 2.0d * njac[k+1, 1, 1] + tmp1 * 2.0d * dz2;&#xA;                        lhsb[k, 2, 1] = tmp1 * 2.0d * njac[k+1, 2, 1];&#xA;                        lhsb[k, 3, 1] = tmp1 * 2.0d * njac[k+1, 3, 1];&#xA;                        lhsb[k, 4, 1] = tmp1 * 2.0d * njac[k+1, 4, 1];&#xA;&#xA;                        lhsb[k, 0, 2] = tmp1 * 2.0d * njac[k+1, 0, 2];&#xA;                        lhsb[k, 1, 2] = tmp1 * 2.0d * njac[k+1, 1, 2];&#xA;                        lhsb[k, 2, 2] = 1.0d + tmp1 * 2.0d * njac[k+1, 2, 2] + tmp1 * 2.0d * dz3;&#xA;                        lhsb[k, 3, 2] = tmp1 * 2.0d * njac[k+1, 3, 2];&#xA;                        lhsb[k, 4, 2] = tmp1 * 2.0d * njac[k+1, 4, 2];&#xA;&#xA;                        lhsb[k, 0, 3] = tmp1 * 2.0d * njac[k+1, 0, 3];&#xA;                        lhsb[k, 1, 3] = tmp1 * 2.0d * njac[k+1, 1, 3];&#xA;                        lhsb[k, 2, 3] = tmp1 * 2.0d * njac[k+1, 2, 3];&#xA;                        lhsb[k, 3, 3] = 1.0d + tmp1 * 2.0d * njac[k+1, 3, 3] + tmp1 * 2.0d * dz4;&#xA;                        lhsb[k, 4, 3] = tmp1 * 2.0d * njac[k+1, 4, 3];&#xA;&#xA;                        lhsb[k, 0, 4] = tmp1 * 2.0d * njac[k+1, 0, 4];&#xA;                        lhsb[k, 1, 4] = tmp1 * 2.0d * njac[k+1, 1, 4];&#xA;                        lhsb[k, 2, 4] = tmp1 * 2.0d * njac[k+1, 2, 4];&#xA;                        lhsb[k, 3, 4] = tmp1 * 2.0d * njac[k+1, 3, 4];&#xA;                        lhsb[k, 4, 4] = 1.0d + tmp1 * 2.0d * njac[k+1, 4, 4] + tmp1 * 2.0d * dz5;&#xA;&#xA;                        lhsc[c, k, j, i, 0, 0] = tmp2 * fjac[k+2, 0, 0] - tmp1 * njac[k+2, 0, 0] - tmp1 * dz1;&#xA;                        lhsc[c, k, j, i, 1, 0] = tmp2 * fjac[k+2, 1, 0] - tmp1 * njac[k+2, 1, 0];&#xA;                        lhsc[c, k, j, i, 2, 0] = tmp2 * fjac[k+2, 2, 0] - tmp1 * njac[k+2, 2, 0];&#xA;                        lhsc[c, k, j, i, 3, 0] = tmp2 * fjac[k+2, 3, 0] - tmp1 * njac[k+2, 3, 0];&#xA;                        lhsc[c, k, j, i, 4, 0] = tmp2 * fjac[k+2, 4, 0] - tmp1 * njac[k+2, 4, 0];&#xA;&#xA;                        lhsc[c, k, j, i, 0, 1] = tmp2 * fjac[k+2, 0, 1] - tmp1 * njac[k+2, 0, 1];&#xA;                        lhsc[c, k, j, i, 1, 1] = tmp2 * fjac[k+2, 1, 1] - tmp1 * njac[k+2, 1, 1] - tmp1 * dz2;&#xA;                        lhsc[c, k, j, i, 2, 1] = tmp2 * fjac[k+2, 2, 1] - tmp1 * njac[k+2, 2, 1];&#xA;                        lhsc[c, k, j, i, 3, 1] = tmp2 * fjac[k+2, 3, 1] - tmp1 * njac[k+2, 3, 1];&#xA;                        lhsc[c, k, j, i, 4, 1] = tmp2 * fjac[k+2, 4, 1] - tmp1 * njac[k+2, 4, 1];&#xA;&#xA;                        lhsc[c, k, j, i, 0, 2] = tmp2 * fjac[k+2, 0, 2] - tmp1 * njac[k+2, 0, 2];&#xA;                        lhsc[c, k, j, i, 1, 2] = tmp2 * fjac[k+2, 1, 2] - tmp1 * njac[k+2, 1, 2];&#xA;                        lhsc[c, k, j, i, 2, 2] = tmp2 * fjac[k+2, 2, 2] - tmp1 * njac[k+2, 2, 2] - tmp1 * dz3;&#xA;                        lhsc[c, k, j, i, 3, 2] = tmp2 * fjac[k+2, 3, 2] - tmp1 * njac[k+2, 3, 2];&#xA;                        lhsc[c, k, j, i, 4, 2] = tmp2 * fjac[k+2, 4, 2] - tmp1 * njac[k+2, 4, 2];&#xA;&#xA;                        lhsc[c, k, j, i, 0, 3] = tmp2 * fjac[k+2, 0, 3] - tmp1 * njac[k+2, 0, 3];&#xA;                        lhsc[c, k, j, i, 1, 3] = tmp2 * fjac[k+2, 1, 3] - tmp1 * njac[k+2, 1, 3];&#xA;                        lhsc[c, k, j, i, 2, 3] = tmp2 * fjac[k+2, 2, 3] - tmp1 * njac[k+2, 2, 3];&#xA;                        lhsc[c, k, j, i, 3, 3] = tmp2 * fjac[k+2, 3, 3] - tmp1 * njac[k+2, 3, 3] - tmp1 * dz4;&#xA;                        lhsc[c, k, j, i, 4, 3] = tmp2 * fjac[k+2, 4, 3] - tmp1 * njac[k+2, 4, 3];&#xA;&#xA;                        lhsc[c, k, j, i, 0, 4] = tmp2 * fjac[k+2, 0, 4] - tmp1 * njac[k+2, 0, 4];&#xA;                        lhsc[c, k, j, i, 1, 4] = tmp2 * fjac[k+2, 1, 4] - tmp1 * njac[k+2, 1, 4];&#xA;                        lhsc[c, k, j, i, 2, 4] = tmp2 * fjac[k+2, 2, 4] - tmp1 * njac[k+2, 2, 4];&#xA;                        lhsc[c, k, j, i, 3, 4] = tmp2 * fjac[k+2, 3, 4] - tmp1 * njac[k+2, 3, 4];&#xA;                        lhsc[c, k, j, i, 4, 4] = tmp2 * fjac[k+2, 4, 4] - tmp1 * njac[k+2, 4, 4] - tmp1 * dz5;&#xA;                    }&#xA;                    &#xA;                    if(first == 1) &#xA;                    {&#xA;                        Binvcrhs.setParameters(lhsb, lhsc, rhs, kstart, c, kstart, j, i, c, kstart, j, i);&#xA;                        Binvcrhs.go();&#xA;                    }&#xA;                    &#xA;                    for(k = kstart + first; k &lt;= ksize - last; k++) &#xA;                    {&#xA;                        Matvec_sub.setParameters(lhsa, rhs, rhs, k, c, k-1, j, i, c, k, j, i);&#xA;                        Matvec_sub.go();&#xA;                        Matmul_sub.setParameters(lhsa, lhsc, lhsb, k, c, k-1, j, i, k);&#xA;                        Matmul_sub.go();&#xA;                        Binvcrhs.setParameters(lhsb, lhsc, rhs, k, c, k, j, i, c, k, j, i);&#xA;                        Binvcrhs.go();&#xA;                    }&#xA;                    &#xA;                    if(last == 1) &#xA;                    {&#xA;                        Matvec_sub.setParameters(lhsa, rhs, rhs, ksize, c, ksize-1, j, i, c, ksize, j, i);&#xA;                        Matvec_sub.go();&#xA;                        Matmul_sub.setParameters(lhsa, lhsc, lhsb, ksize, c, ksize-1, j, i, ksize);&#xA;                        Matmul_sub.go();&#xA;                        Binvrhs.setParameters(lhsb, rhs, ksize, c, ksize, j, i);&#xA;                        Binvrhs.go();&#xA;                    }&#xA;                }&#xA;            }&#xA;            &#xA;            &#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;" fileType="library" name="IZSolverCell.cs" srcType="user" uri="impl.bt.solve.ZSolverCell/bin/1.0.0.0/IZSolverCell.dll" versionId="1.0.0.0">
          <dependency>bt.problem_size.Instance_BT/bin/1.0.0.0/IInstance_BT.dll</dependency>
          <dependency>common.problem_size.Class/bin/1.0.0.0/IClass.dll</dependency>
          <dependency>common.axis.ZAxis/bin/1.0.0.0/IZ.dll</dependency>
          <dependency>bt.solve.BTMethod/bin/1.0.0.0/IBTMethod.dll</dependency>
          <dependency>%WORKSPACE/impl.bt.solve.ZSolverCell/bin/1.0.0.0/BaseIZSolverCell.dll</dependency>
          <dependency>bt.solve.SolveCell/bin/1.0.0.0/ISolveCell.dll</dependency>
        </file>
      </sources>
      <visualDescription h="51" w="103" x="200" y="130">
        <color b="255" g="128" r="255"/>
      </visualDescription>
      <port name="iteration_control">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="iteration_control" sRef="iteration_control"/>
      </port>
      <port name="lhsc">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="lhsc" sRef="lhsc"/>
      </port>
      <port name="cells_info">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="cells_info" sRef="cells_info"/>
      </port>
      <port name="problem_data">
        <visualDescription h="10" w="10" x="0" y="0"/>
        <slice pRef="problem_data" sRef="problem_data"/>
      </port>
      <parameter iname="IInstance_BT" order="0" parid="instance_type" uname="instance" varid="I"/>
      <parameter iname="IClass" order="1" parid="class" uname="class" varid="C"/>
      <parameter iname="IZ" order="2" parid="axis" uname="z" varid="DIR"/>
      <parameter iname="IBTMethod" order="3" parid="method" uname="method" varid="MTH"/>
      <action id="main">
        <protocol/>
      </action>
    </interface>
    <unit iRef="IZSolverCell" multiple="true" private="false" replica="0" uRef="solve_cell" visibleInterface="true">
      <super cRef="base" uRef="solve_cell"/>
      <visualDescription h="55" w="87" x="223" y="310"/>
    </unit>
  </componentInfo>
</component:component>